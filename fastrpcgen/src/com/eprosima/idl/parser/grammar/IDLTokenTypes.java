// $ANTLR 2.7.7 (20060906): "idl.g" -> "IDLParser.java"$

    package com.eprosima.idl.parser.grammar;
    
    import com.eprosima.idl.context.Context;
    import com.eprosima.idl.generator.manager.TemplateManager;
    import com.eprosima.idl.generator.manager.TemplateGroup;
    import com.eprosima.idl.generator.manager.TemplateUtil;
    import com.eprosima.idl.parser.typecode.*;
    import com.eprosima.idl.parser.tree.*;
    import com.eprosima.idl.util.Pair;
    import com.eprosima.idl.parser.exception.ParseException;
   
    import java.util.Vector;
 
public interface IDLTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SEMI = 4;
	int LITERAL_abstract = 5;
	int LITERAL_local = 6;
	int LITERAL_interface = 7;
	int LITERAL_custom = 8;
	int LITERAL_valuetype = 9;
	int LITERAL_eventtype = 10;
	int LITERAL_module = 11;
	int LCURLY = 12;
	int RCURLY = 13;
	int COLON = 14;
	int COMMA = 15;
	int SCOPEOP = 16;
	int IDENT = 17;
	int LITERAL_truncatable = 18;
	int LITERAL_supports = 19;
	int LITERAL_public = 20;
	int LITERAL_private = 21;
	int LITERAL_factory = 22;
	int LPAREN = 23;
	int RPAREN = 24;
	int LITERAL_in = 25;
	int LITERAL_const = 26;
	int ASSIGN = 27;
	int OR = 28;
	int XOR = 29;
	int AND = 30;
	int LSHIFT = 31;
	int RSHIFT = 32;
	int PLUS = 33;
	int MINUS = 34;
	int STAR = 35;
	int DIV = 36;
	int MOD = 37;
	int TILDE = 38;
	int LITERAL_TRUE = 39;
	int LITERAL_FALSE = 40;
	int LITERAL_typedef = 41;
	int LITERAL_native = 42;
	int LITERAL_float = 43;
	int LITERAL_double = 44;
	int LITERAL_long = 45;
	int LITERAL_short = 46;
	int LITERAL_unsigned = 47;
	int LITERAL_char = 48;
	int LITERAL_wchar = 49;
	int LITERAL_boolean = 50;
	int LITERAL_octet = 51;
	int LITERAL_any = 52;
	int LITERAL_Object = 53;
	int AT = 54;
	int LITERAL_Annotation = 55;
	int LITERAL_struct = 56;
	int LITERAL_union = 57;
	int LITERAL_switch = 58;
	int LITERAL_case = 59;
	int LITERAL_default = 60;
	int LITERAL_enum = 61;
	int LITERAL_sequence = 62;
	int LT = 63;
	int GT = 64;
	int LITERAL_string = 65;
	int LITERAL_wstring = 66;
	int LBRACK = 67;
	int RBRACK = 68;
	int LITERAL_exception = 69;
	int LITERAL_oneway = 70;
	int LITERAL_void = 71;
	int LITERAL_out = 72;
	int LITERAL_inout = 73;
	int LITERAL_raises = 74;
	int LITERAL_context = 75;
	int LITERAL_fixed = 76;
	int LITERAL_ValueBase = 77;
	int LITERAL_import = 78;
	int LITERAL_typeid = 79;
	int LITERAL_typeprefix = 80;
	int LITERAL_readonly = 81;
	int LITERAL_attribute = 82;
	int LITERAL_getraises = 83;
	int LITERAL_setraises = 84;
	int LITERAL_component = 85;
	int LITERAL_provides = 86;
	int LITERAL_uses = 87;
	int LITERAL_multiple = 88;
	int LITERAL_emits = 89;
	int LITERAL_publishes = 90;
	int LITERAL_consumes = 91;
	int LITERAL_home = 92;
	int LITERAL_manages = 93;
	int LITERAL_primarykey = 94;
	int LITERAL_finder = 95;
	int INT = 96;
	int OCTAL = 97;
	int HEX = 98;
	int STRING_LITERAL = 99;
	int WIDE_STRING_LITERAL = 100;
	int CHAR_LITERAL = 101;
	int WIDE_CHAR_LITERAL = 102;
	int FIXED = 103;
	int FLOAT = 104;
	int QUESTION = 105;
	int DOT = 106;
	int NOT = 107;
	int WS = 108;
	int PREPROC_DIRECTIVE = 109;
	int SL_COMMENT = 110;
	int ML_COMMENT = 111;
	int ESC = 112;
	int VOCAB = 113;
	int DIGIT = 114;
	int NONZERODIGIT = 115;
	int OCTDIGIT = 116;
	int HEXDIGIT = 117;
	int ESCAPED_IDENT = 118;
}
