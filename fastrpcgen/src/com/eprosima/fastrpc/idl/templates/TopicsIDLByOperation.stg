group TopicsIDLByOperation;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "RequestReply.idl"], description=["This IDL file contains the definition of the DDS messages for all defined interfaces by the user."])$

#include "MessageHeader.idl"
#include "$ctx.filename$.idl"

$definitions; separator="\n"$
>>

module(ctx, module, definition_list) ::= <<
$if(module.thereAreValidDefinitions)$
module $module.name$
{
    $definition_list$
};

$endif$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<

$preRepIDLDefines(name=[operation.parent.name, "_", operation.name])$
/*!
 * @brief Topic used to receive/send requests for the procedure $operation.name$.
 * @ingroup $ctx.trimfilename$
 */
struct $operation.parent.name$_$operation.name$Request{
    RequestHeader _header;
    $operation.inputparam : {$it.typecode.idlTypename$ $it.name$;};separator="\n"$
}; $levelIDLdefine()$

$if(!operation.oneway)$
$if(operation.exceptions)$
$if([operation.outputparam, operation.rettype])$
/*!
 * @brief This structure encapsulates the output parameters.
 * @ingroup $ctx.trimfilename$
 */
struct  $operation.parent.name$_$operation.name$Reply_st
{
   $operation.outputparam : {$it.typecode.idlTypename$ $it.name$;};separator="\n"$
   $if(operation.rettype)$$operation.rettype.idlTypename$ $operation.name$_ret;$endif$
}; $nolevelIDLdefine()$
$endif$

/*!
 * @brief This union is used to encapsulate output parameters and user exceptions.
 * @ingroup $ctx.trimfilename$
 */
union $operation.parent.name$_$operation.name$Reply_union switch (long)
{
$if([operation.outputparam, operation.rettype])$
   case  0:
      $operation.parent.name$_$operation.name$Reply_st st;
$endif$
   $operation.exceptions : { exception |
   case $i$:
      $exception.scopedname$_t $exception.formatedScopedname$_ex;
   }; separator="\n"$
}; $nolevelIDLdefine()$

$endif$
$preRepIDLDefines(name=[operation.parent.name, "_", operation.name])$
/*!
 * @brief Topic used to receive/send replies for the procedure $operation.name$.
 * @ingroup $ctx.trimfilename$
 */
struct $operation.parent.name$_$operation.name$Reply{
    ReplyHeader _header;
$if(operation.exceptions)$
    $operation.parent.name$_$operation.name$Reply_union unio;
    
$else$
    $operation.outputparam : {$it.typecode.idlTypename$ $it.name$;};separator="\n"$
    $if(operation.rettype)$$operation.rettype.idlTypename$ $operation.name$_ret;$endif$
    
$endif$
}; $levelIDLdefine()$
$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>
