group RTIExceptionsSource;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Exceptions.cxx"], description=["TODO This source file contains the declaration of common types in ", ctx.filename, ".idl"])$

#include "$ctx.filename$Exceptions.h"
#include <string.h>

using namespace eprosima::rpc;
using namespace ::exception;

$definitions; separator="\n"$
>>

module(ctx, module, definition_list) ::= <<
$definition_list$

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<
$exception.scopedname$::$exception.name$() : UserException()
{
    $exception.members : { member |$member_default_init(member=member)$}; separator="\n"$
}

$exception.scopedname$::$exception.name$(const $exception.name$ &ex) : UserException(ex)
{
    $exception.members : { member |$copy(member=member, dataname="ex", constructor="yes")$}; separator="\n"$
}

$exception.scopedname$::$exception.name$($exception.name$&& ex) : UserException(std::move(ex))
{
    $exception.members : { member |$move(member=member, dataname="ex", constructor="yes")$}; separator="\n"$
}

$exception.scopedname$& $exception.scopedname$::operator=(const $exception.name$ &ex)
{
	UserException::operator=(ex);
	$exception.members : { member |$copy(member=member, dataname="ex")$}; separator="\n"$
	return *this;
}

$exception.scopedname$& $exception.scopedname$::operator=($exception.name$&& ex)
{
	operator=(std::move(ex));
	$exception.members : { member |$move(member=member, dataname="ex")$}; separator="\n"$
	return *this;
}

$exception.scopedname$::~$exception.name$() throw()
{
    $exception.members : { member |$varDel(variable=member)$}; separator="\n"$
}

void $exception.scopedname$::raise() const
{
	throw *this;
}

>>

operation(ctx, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>

copy(member, dataname, constructor) ::= <<
$if(member.typecode.primitive)$
$if(member.typecode.isType_d)$
$if(!constructor)$
if($member.name$ != NULL)
    free($member.name$);
$endif$
$member.name$ = strdup($dataname$.$member.name$);
$else$
$member.name$ = $dataname$.$member.name$;
$endif$
$else$
$if(member.typecode.isType_f)$
memcpy($member.name$, $dataname$.$member.name$, $member.typecode.size$ * sizeof($member.typecode.stTypename$));
$else$
$memberComplexInitCopy(...)$
$endif$
$endif$
>>

move(member, dataname, constructor) ::= <<
$if(member.typecode.primitive)$
$if(member.typecode.isType_d)$
$if(!constructor)$
if($member.name$ != NULL)
    free($member.name$);
$endif$
$member.name$ = $dataname$.$member.name$;
$dataname$.$member.name$ = NULL;
$else$
$member.name$ = $dataname$.$member.name$;
$endif$
$else$
$if(member.typecode.isType_f)$
memcpy($member.name$, $dataname$.$member.name$, $member.typecode.size$ * sizeof($member.typecode.stTypename$));
$else$
// TODO Memory leak. igualar y poner la otra todo a cero.
$memberComplexInitCopy(...)$
$endif$
$endif$
>>
