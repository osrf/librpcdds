group DDSProtocolSourceByInterface;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "DDSProtocol.cxx"], description=["This source file contains the definition of the protocol used to create DDS messages."])$

#include "$ctx.filename$DDSProtocol.h"
#include "$ctx.product$/transports/Transport.h"
$if(ctx.client)$
#include "$ctx.product$/transports/dds/ProxyTransport.h"
#include "$ctx.product$/transports/dds/components/ProxyProcedureEndpoint.h"
#include "$ctx.filename$DDSAsyncSupport.h"

$endif$
$if(ctx.server)$
#include "$ctx.product$/transports/dds/ServerTransport.h"
#include "$ctx.product$/transports/dds/components/ServerProcedureEndpoint.h"

$endif$
#include "$ctx.product$/exceptions/Exceptions.h"
$if(!ctx.rtiTypes)$
#include "$ctx.filename$TopicsPlugin.h"
$else$
$ReqRepSIncludes(filename=ctx.filename)$
$endif$

using namespace eprosima::rpc;
using namespace ::protocol::dds;
using namespace ::transport;
using namespace ::exception;

$ctx.filename$Protocol::$ctx.filename$Protocol() : ::protocol::$ctx.filename$Protocol(), m_ddsTransport(NULL)
$ctx.interfaces : { interface |
, $interface.formatedScopedname$_str("$interface.formatedScopedname$")
$if(ctx.client)$
, $interface.formatedScopedname$_pe(NULL)
$endif$
$if(ctx.server)$
, $interface.formatedScopedname$_se(NULL)
$endif$
}$
{
}

$ctx.filename$Protocol::~$ctx.filename$Protocol()
{
}

bool $ctx.filename$Protocol::setTransport(Transport &transport)
{
    if(strcmp(transport.getType(), "DDS") == 0)
    {
        m_ddsTransport = dynamic_cast<eprosima::rpc::transport::dds::Transport*>(&transport);
        
        m_ddsTransport->initialize();
        
        Protocol::_setTransport(transport);
        
        return true;  
    }
    else
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }
    
    return false;
}

// TODO Si falla que elimine los creados.
bool $ctx.filename$Protocol::activateInterface(const char* interfaceName)
{
    const char *requesttypeName = NULL, *replytypeName = NULL;

    if(m_ddsTransport != NULL)
    {
        ::transport::TransportBehaviour behaviour = dynamic_cast<::transport::Transport*>(m_ddsTransport)->getBehaviour();
        
        $if(first(ctx.interfaces))$
        if(strcmp(interfaceName, "$first(ctx.interfaces).scopedname$") == 0)
        {
            $getTypenameInterface(interface=first(ctx.interfaces), suffix="Request", varname="requesttypeName")$
    
            if($registerTypenameInterfaceAndCheck(interface=first(ctx.interfaces), suffix="Request", varname="requesttypeName")$)
            {
                return false;
            }
            
            $getTypenameInterface(interface=first(ctx.interfaces), suffix="Reply", varname="replytypeName")$
    
            if($registerTypenameInterfaceAndCheck(interface=first(ctx.interfaces), suffix="Reply", varname="replytypeName")$)
            {
                return false;
            }
            
            $if(ctx.client)$
            if(behaviour == ::transport::PROXY_BEHAVIOUR)
            {
                $first(ctx.interfaces).formatedScopedname$_pe = dynamic_cast<::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($first(ctx.interfaces).formatedScopedname$_str,
                requesttypeName,
                replytypeName,
                $eprosimaTypesBool()$,
                $createDataCallbackInterface(interface=first(ctx.interfaces), suffix="Reply")$,
                $copyDataCallbackInterface(interface=first(ctx.interfaces), suffix="Reply")$,
                $destroyDataCallbackInterface(interface=first(ctx.interfaces), suffix="Reply")$,
                NULL,
                sizeof($first(ctx.interfaces).scopedname$Reply)
                ));
            }
            $endif$
            $if(ctx.server)$
            if(behaviour == ::transport::SERVER_BEHAVIOUR)
            {
                $first(ctx.interfaces).formatedScopedname$_se = dynamic_cast<::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($first(ctx.interfaces).formatedScopedname$_str,
                    replytypeName,
                    requesttypeName,
		            $eprosimaTypesBool()$,
                    $createDataCallbackInterface(interface=first(ctx.interfaces), suffix="Request")$,
                    $copyDataCallbackInterface(interface=first(ctx.interfaces), suffix="Request")$,
                    $destroyDataCallbackInterface(interface=first(ctx.interfaces), suffix="Request")$,
                    $ctx.filename$Protocol::$first(ctx.interfaces).formatedScopedname$_serve,
                    sizeof($first(ctx.interfaces).scopedname$Request)));
            }
            $endif$
        }
        $rest(ctx.interfaces) : {interface |
        else if(strcmp(interfaceName, "$interface.scopedname$") == 0)
        {
            $getTypenameInterface(interface=interface, suffix="Request", varname="requesttypeName")$
    
            if($registerTypenameInterfaceAndCheck(interface=interface, suffix="Request", varname="requesttypeName")$)
            {
                return false;
            }
            
            $getTypenameInterface(interface=interface, suffix="Reply", varname="replytypeName")$
    
            if($registerTypenameInterfaceAndCheck(interface=interface, suffix="Reply", varname="replytypeName")$)
            {
                return false;
            }
            
            $if(ctx.client)$
            if(behaviour == ::transport::PROXY_BEHAVIOUR)
            {
                $interface.formatedScopedname$_pe = dynamic_cast<::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($interface.formatedScopedname$_str,
                requesttypeName,
                replytypeName,
                $eprosimaTypesBool()$,
                $createDataCallbackInterface(interface=interface, suffix="Reply")$,
                $copyDataCallbackInterface(interface=interface, suffix="Reply")$,
                $destroyDataCallbackInterface(interface=interface, suffix="Reply")$,
                NULL,
                sizeof($interface.scopedname$Reply)
                ));
            }
            $endif$
            $if(ctx.server)$
            if(behaviour == ::transport::SERVER_BEHAVIOUR)
            {
                $interface.formatedScopedname$_se = dynamic_cast<::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($interface.formatedScopedname$_str,
                    replytypeName,
                    requesttypeName,
		            $eprosimaTypesBool()$,
                    $createDataCallbackInterface(interface=interface, suffix="Request")$,
                    $copyDataCallbackInterface(interface=interface, suffix="Request")$,
                    $destroyDataCallbackInterface(interface=interface, suffix="Request")$,
                    $ctx.filename$Protocol::$interface.formatedScopedname$_serve,
                    sizeof($interface.scopedname$Request)));
            }
            $endif$
        }
        
        return true;
        }$
        $endif$
    }
    else
    {
      // TODO Trace.
    }
    
    return false;
}

$definitions; separator="\n"$
>>

module(ctx, module, definition_list) ::= <<
$definition_list$

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$

$if(ctx.server)$
void $ctx.filename$Protocol::$interface.formatedScopedname$_serve(eprosima::rpc::protocol::Protocol &protocol,
    void *data , eprosima::rpc::transport::Endpoint *endpoint)
{
    $ctx.filename$Protocol &_protocol = dynamic_cast<$ctx.filename$Protocol&>(protocol);
    $interface.scopedname$Request &requestData = *($interface.scopedname$Request*)data;

    switch($interfaceUnionDiscriminator(varname="requestData")$)
    {
        $interface.operations : { operation |
        case $i$:
        {
        $operation.parameters : {param | $varDecl(variable=param, create=param.onlyOutput)$}; separator="\n"$
        $varDecl(variable=operation.rettypeparam, create="yes")$   
        $if(!operation.oneway)$
        $operation.parent.scopedname$Reply replyData;
        $copyHeaderInfo(reqvarname="requestData", repvarname="replyData")$

        $interfaceUnionDiscriminator(varname="replyData")$ = $operation.cardinal$;
        $endif$

        $operation.inoutputparam : {param |$if(!param.typecode.primitive)$$varComplexInitialize(variable=param)$$\n$$endif$}$

        $operation.inputparam : {param | $extractParamFromTopic(param=param, varname=interfaceUnionOperation(operation=operation, varname="requestData"))$};separator="\n"$

        try
        {
            if(_protocol._$operation.parent.formatedScopedname$_impl != NULL)
            {
                $if(operation.rettypeparam)$$operation.rettypeparam.name$ = $endif$_protocol._$operation.parent.formatedScopedname$_impl->$operation.name$($extractParams(params=operation.parameters)$);

                $if(!operation.oneway)$
                $if(operation.exceptions)$$replyUnionDiscriminatorByInterface(operation=operation, varname="replyData")$ = 0;$endif$

                $if(operation.exceptions)$
                $[operation.outputparam, operation.rettypeparam] : { param |$addParamToTopic(param=param, varname=replyUnionDataByInterface(operation=operation, varname="replyData", dataname="st"))$};separator="\n"$
                $else$
                $[operation.outputparam, operation.rettypeparam] : { param |$addParamToTopic(param=param, varname=interfaceUnionOperation(operation=operation, varname="replyData"))$};separator="\n"$
                $endif$

                $setHeaderSuccess(varname="replyData")$

                _protocol.$operation.parent.formatedScopedname$_se->sendReply(&replyData);
                $endif$
            }
            // TODO Send exception.
        }
        $operation.exceptions : { exception |
        catch(const $exception.scopedname$ &ex)
        {
            $if(!operation.oneway)$
            $replyUnionDiscriminatorByInterface(operation=operation, varname="replyData")$ = $i$;

            $if(!ctx.rtiTypes)$
            replyData.unio().$operation.name$().$exception.formatedScopedname$_ex(std::move(ex));
            $else$
            $exception.members : { member |$addExceptionMemberToTopicByInterface(operation=operation, exception=exception, member=member, varname="replyData")$}; separator="\n"$
            $endif$

            $setHeaderSuccess(varname="replyData")$

            _protocol.$operation.parent.formatedScopedname$_se->sendReply(&replyData);
            $endif$
        }
        }; separator="\n"$
        catch(const ServerInternalException &ex)
        {
            $if(!operation.oneway)$
            $unsetReply()$
            $setHeaderServerInternalException(varname="replyData")$

            _protocol.$operation.parent.formatedScopedname$_se->sendReply(&replyData);
            $endif$
        }

        $reqrepRefFinalize(type=operation.parent.scopedname, reqrep="Request", name="requestData")$

        $[operation.outputparam, operation.rettypeparam] : {param | $varDel(variable=param)$}; separator="\n"$

        }
        break;
        }; separator="\n"$
    };        
}
$endif$

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$if(ctx.client)$
$paramRetType(operation.rettype)$ $ctx.filename$Protocol::$operation.parent.formatedScopedname$_$operation.name$($paramDeclsOnlyOutByRef(params=operation.parameters)$)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    $varDecl(variable=operation.rettypeparam)$
    $operation.parent.scopedname$Request instance;
    $if(!operation.oneway)$
    $operation.parent.scopedname$Reply retInstance;

    $varComplexInitializeT(typeName=[operation.parent.scopedname, "Reply"], name="retInstance")$
    $endif$

    $interfaceUnionDiscriminator(varname="instance")$ = $operation.cardinal$;
    
    $operation.inputparam : { param |$addParamToTopic(param=param, varname=interfaceUnionOperation(operation=operation, varname="instance"), isRequest="yes")$};separator="\n"$

    retcode = $operation.parent.formatedScopedname$_pe->send(&instance, $if(!operation.oneway)$&retInstance$else$NULL$endif$);
    
    $if(!operation.oneway)$
    if(retcode == OPERATION_SUCCESSFUL)
    {
    
    $if(operation.exceptions)$
        switch ($replyUnionDiscriminatorByInterface(operation=operation, varname="retInstance")$)
        {
            case 0:
                retcode = (ReturnMessage)$getHeaderRetCode(varname="retInstance")$;
		        $[operation.outputparam, operation.rettypeparam] : { param |$extractParamFromTopic(param=param, varname=replyUnionDataByInterface(operation=operation, varname="retInstance", dataname="st"), isReply="yes")$};separator="\n"$
                break;
            $operation.exceptions : { exception |
            case $i$:
                {
                $exception.scopedname$ ex;
                // TODO No permite arrays.
                $if(!ctx.rtiTypes)$
                ex = retInstance.unio().$operation.name$().$exception.formatedScopedname$_ex();
                $else$
                $exception.members : { member |$extractExceptionMemberFromTopicByInterface(exception=exception, member=member, varname=interfaceUnionOperation(operation=operation, varname="retInstance"))$}; separator="\n"$
                $endif$
                
                ex.raise();
                }
            }; separator="\n"$
            default:
                throw ClientInternalException("Error extracting information from server");
        }
        
    $else$
        retcode = (ReturnMessage)$getHeaderRetCode(varname="retInstance")$;
        $[operation.outputparam, operation.rettypeparam] : { param |$extractParamFromTopic(param=param, varname=interfaceUnionOperation(operation=operation, varname="retInstance"), isReply="yes")$};separator="\n"$
    
    $endif$
    }
    
    $endif$  
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        $if(!operation.oneway)$
        case SERVER_TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException($getHeaderRetMsg(varname="retInstance")$);
            break;
        $endif$
        default:
            break;
    };
    

    $if(operation.rettypeparam)$
    return $operation.rettypeparam.name$;
    $endif$
}
$endif$

$if(!operation.oneway)$
void $ctx.filename$Protocol::$operation.parent.formatedScopedname$_$operation.name$_async($operation.parent.scopedname$_$operation.name$CallbackHandler &obj$paramDeclsByValue(params=operation.inputparam, separatorInicial=", ")$)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    $operation.parent.scopedname$Request instance;
    $operation.parent.scopedname$_$operation.name$Task *task = new $operation.parent.scopedname$_$operation.name$Task(obj);

    $interfaceUnionDiscriminator(varname="instance")$ = $operation.cardinal$;
    
    $operation.inputparam : { param |$addParamToTopic(param=param, varname=interfaceUnionOperation(operation=operation, varname="instance"), isRequest="yes")$};separator="\n"$

    retcode = $operation.parent.formatedScopedname$_pe->send_async(&instance, task);
    
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}

$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>

