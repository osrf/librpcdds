group TypesSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, ".cpp"], description=["This source file contains the definition of the described types in the IDL file."])$

#include "$ctx.filename$.h"

$if(ctx.cdr)$
#include "fastcdr/Cdr.h"

$elseif(ctx.fastcdr)$
#include "fastcdr/FastCdr.h"

$endif$

$if(ctx.fastrpcProduct)$
#include "$ctx.product$/exceptions/BadParamException.h"
using namespace eprosima::rpc::exception;

$else$
#include "fastcdr/exceptions/BadParamException.h"
using namespace eprosima::fastcdr::exception;

$endif$

#include <utility>

$definitions; separator="\n"$
>>

module(ctx, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, exception) ::= <<
$exception.scopedname$::$exception.name$() : UserException()
{
    $exception.members : { member |$member_default_init(member=member)$}; separator="\n"$
}

$exception.scopedname$::$exception.name$(const $exception.name$ &x) : UserException(x)
{
    $exception.members : { member |m_$member.name$ = x.m_$member.name$;}; separator="\n"$
}

$exception.scopedname$::$exception.name$($exception.name$&& x) : UserException(std::move(x))
{
    $exception.members : { member |$member_move(member=member)$}; separator="\n"$
}

$exception.scopedname$& $exception.scopedname$::operator=(const $exception.name$ &x)
{
	UserException::operator=(x);
	$exception.members : { member |m_$member.name$ = x.m_$member.name$;}; separator="\n"$
	return *this;
}

$exception.scopedname$& $exception.scopedname$::operator=($exception.name$&& x)
{
	operator=(std::move(x));
	$exception.members : { member |$member_move(member=member)$}; separator="\n"$
	return *this;
}

$exception.scopedname$::~$exception.name$() throw()
{
    $exception.members : { member |$varDel(variable=member)$}; separator="\n"$
}

void $exception.scopedname$::raise() const
{
	throw *this;
}

$if(ctx.anyCdr)$
size_t $exception.scopedname$::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;
            
    $exception.members : { member |$max_serialized_size(ctx=ctx, typecode=member.typecode, var="current_align")$}; separator="\n"$

    return current_align;
}

$endif$

$if(ctx.cdr)$
void $exception.scopedname$::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    $exception.members : { member |$object_serialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

void $exception.scopedname$::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    $exception.members : { member |$object_deserialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

$else$
void $exception.scopedname$::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    $exception.members : { member |$object_serialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

void $exception.scopedname$::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    $exception.members : { member |$object_deserialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

$endif$

>>

operation(ctx, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<
$struct.scopedname$::$struct.name$()
{
    $struct.members:{ member |$member_default_init(member=member)$}; separator="\n"$
}

$struct.scopedname$::~$struct.name$()
{
}

$struct.scopedname$::$struct.name$(const $struct.name$ &x)
{
    $struct.members:{m_$it.name$ = x.m_$it.name$;}; separator="\n"$
}

$struct.scopedname$::$struct.name$($struct.name$ &&x)
{
    $struct.members:{$member_move(it)$}; separator="\n"$
}

$struct.scopedname$& $struct.scopedname$::operator=(const $struct.name$ &x)
{
    $struct.members:{m_$it.name$ = x.m_$it.name$;}; separator="\n"$
    
    return *this;
}

$struct.scopedname$& $struct.scopedname$::operator=($struct.name$ &&x)
{
    $struct.members:{$member_move(it)$}; separator="\n"$
    
    return *this;
}

$if(ctx.anyCdr)$
size_t $struct.scopedname$::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;
            
    $struct.members : { member |$max_serialized_size(ctx=ctx, typecode=member.typecode, var="current_align")$}; separator="\n"$

    return current_align;
}

$endif$

$if(ctx.cdr)$
void $struct.scopedname$::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    $struct.members : { member |$object_serialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

void $struct.scopedname$::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    $struct.members : { member |$object_deserialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

$elseif(ctx.fastcdr)$
void $struct.scopedname$::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    $struct.members : { member |$object_serialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

void $struct.scopedname$::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    $struct.members : { member |$object_deserialization(ctx=ctx, object=member, preffix="m_")$}; separator="\n"$
}

$endif$
>>

union_type(ctx, union) ::= <<
$union.scopedname$::$union.name$()
{
    m__d = $union.defaultvalue$;
    $union.members:{ member |$member_default_init(member=member)$}; separator="\n"$
}

$union.scopedname$::~$union.name$()
{
}

$union.scopedname$::$union.name$(const $union.name$ &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $union.members:{$unionmember_copy(it)$}; separator="\n"$
    }
}

$union.scopedname$::$union.name$($union.name$ &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $union.members:{$unionmember_move(it)$}; separator="\n"$
    }
}

$union.scopedname$& $union.scopedname$::operator=(const $union.name$ &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $union.members:{$unionmember_copy(it)$}; separator="\n"$
    }
    
    return *this;
}

$union.scopedname$& $union.scopedname$::operator=($union.name$ &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $union.members:{$unionmember_move(it)$}; separator="\n"$
    }
    
    return *this;
}

void $union.scopedname$::_d($union.discriminator.cppTypename$ __d)
{
    bool b = false;
    
    switch(m__d)
    {
        $union.members:{$unionmember_discriminator_case(member=it, totallabels=union.totallabels)$}; separator="\n"$
    }
    
    if(!b) throw BadParamException("Discriminator doesn't correspond with the selected union member");
    
    m__d = __d;
}

$union.discriminator.cppTypename$ $union.scopedname$::_d() const
{
    return m__d;
}

$union.discriminator.cppTypename$& $union.scopedname$::_d()
{
    return m__d;
}

$union.members:{$public_unionmember_declaration(class=union.scopedname, member=it, defaultvalue=union.defaultvalue, totallabels=union.totallabels)$}; separator="\n"$

$if(ctx.anyCdr)$
size_t $union.scopedname$::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;
    size_t reset_align = 0;
    size_t union_max_size_serialized = 0;

    $max_serialized_size(ctx=ctx, typecode=union.discriminator, var="current_align")$

    $union.members : { member |
    reset_align = current_align;

    $max_serialized_size(ctx=ctx, typecode=member.typecode, var="reset_align")$

    if(union_max_size_serialized < reset_align)
        union_max_size_serialized = reset_align;

    }; separator="\n"$

    return union_max_size_serialized;
}

$endif$

$if(ctx.cdr)$
void $union.scopedname$::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << $serializeCasting(typecode=union.discriminator)$m__d;

    switch(m__d)
    {
        $union.members:{ member |$unionmember_case_selection_se(ctx=ctx, member=member)$}; separator="\n"$
    }
}

void $union.scopedname$::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> $deserializeCasting(typecode=union.discriminator)$m__d;

    switch(m__d)
    {
        $union.members:{ member |$unionmember_case_selection_de(ctx=ctx, member=member)$}; separator="\n"$
    }
}

$elseif(ctx.fastcdr)$
void $union.scopedname$::serialize(eprosima::fastcdr::FastCdr &scdr) const
{
    scdr << $serializeCasting(typecode=union.discriminator)$m__d;

    switch(m__d)
    {
        $union.members:{ member |$unionmember_case_selection_se(ctx=ctx, member=member)$}; separator="\n"$
    }
}

void $union.scopedname$::deserialize(eprosima::fastcdr::FastCdr &dcdr)
{
    dcdr \>> $deserializeCasting(typecode=union.discriminator)$m__d;

    switch(m__d)
    {
        $union.members:{ member |$unionmember_case_selection_de(ctx=ctx, member=member)$}; separator="\n"$
    }
}

$endif$

>>

enum_type(ctx, enum) ::= <<>>

/***** Utils *****/

public_unionmember_declaration(class, member, totallabels, defaultvalue) ::= <<
$if(member.typecode.primitive)$
void $class$::$member.name$($member.typecode.cppTypename$ _$member.name$)
{
    m_$member.name$ = _$member.name$;
    $unionmember_set_discriminator(member)$
}

$member.typecode.cppTypename$ $class$::$member.name$() const
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$
    
    return m_$member.name$;
}

$member.typecode.cppTypename$& $class$::$member.name$()
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$
    
    return m_$member.name$;
}
$else$
void $class$::$member.name$(const $member.typecode.cppTypename$ &_$member.name$)
{
    m_$member.name$ = _$member.name$;
    $unionmember_set_discriminator(member)$
}

void $class$::$member.name$($member.typecode.cppTypename$ &&_$member.name$)
{
    m_$member.name$ = std::move(_$member.name$);
    $unionmember_set_discriminator(member)$
}

const $member.typecode.cppTypename$& $class$::$member.name$() const
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$
    
    return m_$member.name$;
}

$member.typecode.cppTypename$& $class$::$member.name$()
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$
    
    return m_$member.name$;
}
$endif$
>>

member_move(member) ::= <<
$if(member.typecode.primitive)$
m_$member.name$ = x.m_$member.name$;
$else$
m_$member.name$ = std::move(x.m_$member.name$);
$endif$
>>

// TODO Mirar si el default: está delante de otros casos, el resto no se ejecuta.
unionmember_discriminator_case(member, totallabels) ::= <<
$if(member.default)$
default:
b = true;
switch(__d)
{
    $totallabels:{case $it$:}; separator="\n"$
    b = false;
    break;
    default:
    break;
}
break;
$else$
$member.labels:{case $it$:}; separator="\n"$
switch(__d)
{
    $member.labels:{case $it$:}; separator="\n"$
    b = true;
    break;
    default:
    break;
}
break;
$endif$
>>

unionmember_copy(member) ::= <<
$member.labels:{case $it$:}; separator="\n"$
$if(member.default)$
default:$\n$
$endif$
m_$member.name$ = x.m_$member.name$;
break;
>>

unionmember_move(member) ::= <<
$member.labels:{case $it$:}; separator="\n"$
$if(member.default)$
default:$\n$
$endif$
$if(member.typecode.primitive)$
m_$member.name$ = x.m_$member.name$;
$else$
m_$member.name$ = std::move(x.m_$member.name$);
$endif$
break;
>>

unionmember_set_discriminator(member) ::= <<
$if(member.default)$
m__d = $defaultvalue$;
$else$
m__d = $first(member.labels)$;
$endif$
>>

unionmember_check_case_list(member, totallabels) ::= <<
$if(member.default)$
bool b = true;
    
switch(m__d)
{
    $totallabels:{case $it$:}; separator="\n"$
    b = false;
    break;
    default:
    break;
}
$else$
bool b = false;
    
switch(m__d)
{
    $member.labels:{case $it$:}; separator="\n"$
    b = true;
    break;
    default:
    break;
}
$endif$
    
if(!b) throw BadParamException("This member is not been selected");
>>

unionmember_case_selection_se(ctx, member) ::= <<
$member.labels:{ label |case $label$:}; separator="\n"$
$if(member.default)$
default:$\n$
$endif$
$object_serialization(ctx=ctx, object=member, preffix="m_")$
break;
>>

unionmember_case_selection_de(ctx, member) ::= <<
$member.labels:{ label |case $label$:}; separator="\n"$
$if(member.default)$
default:$\n$
$endif$
$object_deserialization(ctx=ctx, object=member, preffix="m_")$
break;
>>
