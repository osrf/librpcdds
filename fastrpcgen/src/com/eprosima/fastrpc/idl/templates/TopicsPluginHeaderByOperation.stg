/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This copy of FASTRPC is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this distribution.
 *
 *************************************************************************/

group TopicsPluginHeaderByOperation;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "TopicsPlugin.h"], description=["This header file contains the declaration of used by DDS middleware."])$

#ifndef _$ctx.filename;format="toUpper"$_TOPICS_PLUGIN_H_
#define _$ctx.filename;format="toUpper"$_TOPICS_PLUGIN_H_

$if(ctx.firstInterface)$
#include "$ctx.filename$Topics.h"
$endif$

$ctx.directIncludeDependencies : {include | #include "$include$TopicsPlugin.h"}; separator="\n"$

#include "ndds/ndds_cpp.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define user_cpp_DllExport __declspec( dllexport )
#else
#define user_cpp_DllExport
#endif
#else
#define user_cpp_DllExport
#endif

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$_TOPICS_PLUGIN_H_
>>

module(ctx, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $interface.name$Plugin
{
    public:

        $export_list$

    private:

        $interface.name$Plugin(){}
};
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $exception.name$Plugin
{
    public:

        static DDS_TypeCode* get_typecode();
        
};
>>

operation(ctx, operation, param_list) ::= <<
/*!
 * @brief Request DataReader.
 */
class user_cpp_DllExport $operation.name$RequestDataReader : public DDSDataReader
{
    public:

        $operation.name$RequestDataReader(DDSDataReader *impl) : DDSDataReader(impl){}
};

/*!
 * @brief Request DataWriter.
 */
class user_cpp_DllExport $operation.name$RequestDataWriter : public DDSDataWriter
{
    public:

        $operation.name$RequestDataWriter(DDSDataWriter *impl) : DDSDataWriter(impl){}
};

/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $operation.name$RequestPlugin : public DDSTypeSupport
{
    public:

        static const char* get_typename();
        
        static $operation.parent.name$_$operation.name$Request* create_data(void);
        
        static void destroy_data($operation.parent.name$_$operation.name$Request *sample);
        
        static void copy_data($operation.parent.name$_$operation.name$Request *dst,
            const $operation.parent.name$_$operation.name$Request *src);
        
        static unsigned int get_serialized_sample_max_size(
            PRESTypePluginEndpointData endpoint_data,
            RTIBool include_encapsulation,
            RTIEncapsulationId encapsulation_id,
            unsigned int current_alignment);
        
        static unsigned int get_serialized_sample_size(
            PRESTypePluginEndpointData endpoint_data,
            RTIBool include_encapsulation,
            RTIEncapsulationId encapsulation_id,
            unsigned int current_alignment,
            const $operation.parent.name$_$operation.name$Request * sample);
        
        static unsigned int get_serialized_sample_min_size(
            PRESTypePluginEndpointData endpoint_data,
            RTIBool include_encapsulation,
            RTIEncapsulationId encapsulation_id,
            unsigned int current_alignment);
        
        static PRESTypePluginParticipantData on_participant_attached(
            void *registration_data, 
            const struct PRESTypePluginParticipantInfo *participant_info,
            RTIBool top_level_registration, 
            void *container_plugin_context,
            RTICdrTypeCode *typeCode);
        
        static void on_participant_detached(
            PRESTypePluginParticipantData participant_data);
        
        static PRESTypePluginEndpointData on_endpoint_attached(
            PRESTypePluginParticipantData participant_data,
            const struct PRESTypePluginEndpointInfo *endpoint_info,
            RTIBool top_level_registration, 
            void *container_plugin_context);
        
        static void on_endpoint_detached(
            PRESTypePluginEndpointData endpoint_data);
        
        static RTIBool copy_sample(
            PRESTypePluginEndpointData endpoint_data,
            $operation.parent.name$_$operation.name$Request *dst,
            const $operation.parent.name$_$operation.name$Request *src);
        
        static RTIBool serialize(PRESTypePluginEndpointData endpoint_data,
            const $operation.parent.name$_$operation.name$Request *sample, 
            struct RTICdrStream *stream,    
            RTIBool serialize_encapsulation,
            RTIEncapsulationId encapsulation_id,
            RTIBool serialize_sample, 
            void *endpoint_plugin_qos);
        
        static RTIBool deserialize(PRESTypePluginEndpointData endpoint_data,
            $operation.parent.name$_$operation.name$Request **sample,
            RTIBool * drop_sample,
            struct RTICdrStream *stream,   
            RTIBool deserialize_encapsulation,
            RTIBool deserialize_sample, 
            void *endpoint_plugin_qos);
        
        static PRESTypePluginKeyKind get_key_kind(void);
        
        static DDS_TypeCode* get_typecode();
        
        static struct PRESTypePlugin *new_plugin(void);
        
        static void delete_plugin(struct PRESTypePlugin *plugin);
        
        // TODO cambiar a isDDS.
        $if(ctx.dds)$
        /*! TODO Mover al transporte */
        static bool register_type(DDSDomainParticipant *participant, const char *type_name);
        
        // TODO unregister_type.
        $endif$

        DDSDataReader* create_datareaderI(DDSDataReader* dataReader);

        DDS_ReturnCode_t destroy_datareaderI(DDSDataReader* dataReader);

        DDSDataWriter* create_datawriterI(DDSDataWriter* dataWriter);

        DDS_ReturnCode_t destroy_datawriterI(DDSDataWriter* dataWriter);

    private:

        static const char *m_typename;
};

// Reply operations 
$if(!operation.oneway)$
/*!
 * @brief Reply DataReader.
 */
class user_cpp_DllExport $operation.name$ReplyDataReader : public DDSDataReader
{
    public:

        $operation.name$ReplyDataReader(DDSDataReader *impl) : DDSDataReader(impl){}
};

/*!
 * @brief Reply DataWriter.
 */
class user_cpp_DllExport $operation.name$ReplyDataWriter : public DDSDataWriter
{
    public:

        $operation.name$ReplyDataWriter(DDSDataWriter *impl) : DDSDataWriter(impl){}
};

$if(operation.exceptions)$
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $operation.name$Reply_stPlugin
{
    public:

        static DDS_TypeCode* get_typecode();
};

/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $operation.name$Reply_unionPlugin
{
    public:

        static DDS_TypeCode* get_typecode();
};
$endif$

/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $operation.name$ReplyPlugin : public DDSTypeSupport
{
    public:

        static const char* get_typename();
        
        static $operation.parent.name$_$operation.name$Reply* create_data(void);
        
        static void destroy_data($operation.parent.name$_$operation.name$Reply *sample);
        
        static void copy_data($operation.parent.name$_$operation.name$Reply *dst,
            const $operation.parent.name$_$operation.name$Reply *src);
        
        static unsigned int get_serialized_sample_max_size(
            PRESTypePluginEndpointData endpoint_data,
            RTIBool include_encapsulation,
            RTIEncapsulationId encapsulation_id,
            unsigned int current_alignment);
        
        static unsigned int get_serialized_sample_size(
            PRESTypePluginEndpointData endpoint_data,
            RTIBool include_encapsulation,
            RTIEncapsulationId encapsulation_id,
            unsigned int current_alignment,
            const $operation.parent.name$_$operation.name$Reply * sample);
        
        static unsigned int get_serialized_sample_min_size(
            PRESTypePluginEndpointData endpoint_data,
            RTIBool include_encapsulation,
            RTIEncapsulationId encapsulation_id,
            unsigned int current_alignment);
        
        static PRESTypePluginParticipantData on_participant_attached(
            void *registration_data, 
            const struct PRESTypePluginParticipantInfo *participant_info,
            RTIBool top_level_registration, 
            void *container_plugin_context,
            RTICdrTypeCode *typeCode);
        
        static void on_participant_detached(PRESTypePluginParticipantData participant_data);
        
        static PRESTypePluginEndpointData on_endpoint_attached(
            PRESTypePluginParticipantData participant_data,
            const struct PRESTypePluginEndpointInfo *endpoint_info,
            RTIBool top_level_registration, 
            void *container_plugin_context);
        
        static void on_endpoint_detached(PRESTypePluginEndpointData endpoint_data);
        
        static RTIBool copy_sample(PRESTypePluginEndpointData endpoint_data,
            $operation.parent.name$_$operation.name$Reply *dst,
            const $operation.parent.name$_$operation.name$Reply *src);
        
        static RTIBool serialize(PRESTypePluginEndpointData endpoint_data,
            const $operation.parent.name$_$operation.name$Reply *sample, 
            struct RTICdrStream *stream,    
            RTIBool serialize_encapsulation,
            RTIEncapsulationId encapsulation_id,
            RTIBool serialize_sample, 
            void *endpoint_plugin_qos);
        
        static RTIBool deserialize(PRESTypePluginEndpointData endpoint_data,
            $operation.parent.name$_$operation.name$Reply **sample,
            RTIBool * drop_sample,
            struct RTICdrStream *stream,   
            RTIBool deserialize_encapsulation,
            RTIBool deserialize_sample, 
            void *endpoint_plugin_qos);
        
        static PRESTypePluginKeyKind get_key_kind(void);
        
        static DDS_TypeCode* get_typecode();
        
        static struct PRESTypePlugin* new_plugin(void);
        
        static void delete_plugin(struct PRESTypePlugin *plugin);
        
        // TODO cambiar a isDDS.
        $if(ctx.dds)$
        /*! TODO Mover al transporte */
        static bool register_type(DDSDomainParticipant *participant, const char *type_name);
        
        // TODO unregister_type.
        $endif$

        DDSDataReader* create_datareaderI(DDSDataReader* dataReader);

        DDS_ReturnCode_t destroy_datareaderI(DDSDataReader* dataReader);

        DDSDataWriter* create_datawriterI(DDSDataWriter* dataWriter);

        DDS_ReturnCode_t destroy_datawriterI(DDSDataWriter* dataWriter);

    private:

        static const char *m_typename;
};
$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<
$typedefs : { typedef |
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $typedef.name$Plugin
{
    public:

        static DDS_TypeCode* get_typecode();
        
};
}; separator="\n"$
>>

struct_type(ctx, struct) ::= <<
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $struct.name$Plugin
{
    public:

        static DDS_TypeCode* get_typecode();
        
};
>>

union_type(ctx, union) ::= <<
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $union.name$Plugin
{
    public:

        static DDS_TypeCode* get_typecode();
        
};
>>

enum_type(ctx, enum) ::= <<
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $enum.name$Plugin
{
    public:

        static DDS_TypeCode* get_typecode();
        
};
>>

