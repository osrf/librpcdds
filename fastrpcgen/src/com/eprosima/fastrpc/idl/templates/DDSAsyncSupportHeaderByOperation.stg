group AsyncSupportHeaderByOperation;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "AsyncSupport.h"], description=["This header file contains functionality to use asynchronous calls for all interfaces."])$

#ifndef _$ctx.filename;format="toUpper"$_DDS_ASYNC_SUPPORT_H_
#define _$ctx.filename;format="toUpper"$_DDS_ASYNC_SUPPORT_H_

#include "$ctx.product$/transports/dds/DDSAsyncTask.h"
#include "$ctx.product$/exceptions/UserException.h"
#include "$ctx.filename$AsyncCallbackHandlers.h"
$if(!ctx.rtiTypes)$
#include "$ctx.filename$Topics.h"
$else$
$ReqRepSIncludes(filename=ctx.filename)$
$endif$

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$_DDS_ASYNC_SUPPORT_H_
>>

module(ctx, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$if(!operation.oneway)$
/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure $operation.parent.name$::$operation.name$ from the server in an asynchronous call.
 * @ingroup $ctx.trimfilename$
 */
class $operation.parent.name$_$operation.name$Task : public eprosima::rpc::transport::dds::DDSAsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        $operation.parent.name$_$operation.name$Task($operation.parent.name$_$operation.name$CallbackHandler &obj);

        //! @brief Destructor.
        virtual ~$operation.parent.name$_$operation.name$Task();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        $if(operation.exceptions)$
        /*!
         * @brief This function is called when a user exception occurs.
         *        This user exception is launched in the server's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::UserException &ex);
        $endif$
        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        $operation.parent.name$_$operation.name$CallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        $operation.parent.name$_$operation.name$CallbackHandler &m_obj;

        $operation.parent.name$_$operation.name$Reply m_reply;
};

$endif$
>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, const) ::= <<>>

typedef_decl(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>
