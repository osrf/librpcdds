/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this FASTRPC distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorDDSProtocol.cxx
 * This source file contains the definition of the protocol used to create DDS messages.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorDDSProtocol.h"
#include "rpcdds/transports/Transport.h"
#include "rpcdds/transports/dds/ProxyTransport.h"
#include "rpcdds/transports/dds/components/ProxyProcedureEndpoint.h"
#include "CalculatorDDSAsyncSupport.h"
#include "rpcdds/transports/dds/ServerTransport.h"
#include "rpcdds/transports/dds/components/ServerProcedureEndpoint.h"
#include "rpcdds/exceptions/Exceptions.h"
#include "CalculatorRequestReplySupport.h"
using namespace eprosima::rpc;
using namespace ::protocol::dds;
using namespace ::transport;
using namespace ::exception;

CalculatorProtocol::CalculatorProtocol() : ::protocol::CalculatorProtocol(), m_ddsTransport(NULL)
, Calculator_str("Calculator")
, Calculator_pe(NULL), Calculator_se(NULL)
{
}

CalculatorProtocol::~CalculatorProtocol()
{
}

bool CalculatorProtocol::setTransport(Transport &transport)
{
    if(strcmp(transport.getType(), "DDS") == 0)
    {
        m_ddsTransport = dynamic_cast<eprosima::rpc::transport::dds::Transport*>(&transport);
        
        m_ddsTransport->initialize();
        
        Protocol::_setTransport(transport);
        
        return true;  
    }
    else
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }
    
    return false;
}

// TODO Si falla que elimine los creados.
bool CalculatorProtocol::activateInterface(const char* interfaceName)
{
    const char *requesttypeName = NULL, *replytypeName = NULL;

    if(m_ddsTransport != NULL)
    {
        ::transport::TransportBehaviour behaviour = dynamic_cast<::transport::Transport*>(m_ddsTransport)->getBehaviour();
        
        if(strcmp(interfaceName, "Calculator") == 0)
        {
            requesttypeName = CalculatorRequestTypeSupport::get_type_name();
    
            if(CalculatorRequestTypeSupport::register_type(m_ddsTransport->getParticipant(), requesttypeName) != DDS::RETCODE_OK)
            {
                return false;
            }
            
            replytypeName = CalculatorReplyTypeSupport::get_type_name();
    
            if(CalculatorReplyTypeSupport::register_type(m_ddsTransport->getParticipant(), replytypeName) != DDS::RETCODE_OK)
            {
                return false;
            }
            
            if(behaviour == ::transport::PROXY_BEHAVIOUR)
            {
                Calculator_pe = dynamic_cast<::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_str,
                requesttypeName,
                replytypeName,
                false,
                (::transport::dds::Transport::Create_data)CalculatorReplyTypeSupport::create_data,
                (::transport::dds::Transport::Copy_data)CalculatorReplyTypeSupport::copy_data,
                (::transport::dds::Transport::Destroy_data)CalculatorReplyTypeSupport::delete_data,
                NULL,
                sizeof(CalculatorReply)
                ));
            }
            if(behaviour == ::transport::SERVER_BEHAVIOUR)
            {
                Calculator_se = dynamic_cast<::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_str,
                    replytypeName,
                    requesttypeName,
		            false,
                    (::transport::dds::Transport::Create_data)CalculatorRequestTypeSupport::create_data,
                    (::transport::dds::Transport::Copy_data)CalculatorRequestTypeSupport::copy_data,
                    (::transport::dds::Transport::Destroy_data)CalculatorRequestTypeSupport::delete_data,
                    CalculatorProtocol::Calculator_serve,
                    sizeof(CalculatorRequest)));
            }
        }

    }
    else
    {
      // TODO Trace.
    }
    
    return false;
}

DDS_Long CalculatorProtocol::Calculator_addition(/*in*/ DDS_Long value1, /*in*/ DDS_Long value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    DDS_Long  addition_ret = 0;
    CalculatorRequest instance;
    CalculatorReply retInstance;

    CalculatorReply_initialize(&retInstance);

    instance.unio._d = 1;
    
    instance.unio._u.addition.value1 = value1;
    instance.unio._u.addition.value2 = value2;

    retcode = Calculator_pe->send(&instance, &retInstance);
    
    if(retcode == OPERATION_SUCCESSFUL)
    {
    
        retcode = (ReturnMessage)retInstance._header.retCode;
        addition_ret = retInstance.unio._u.addition.addition_ret;
    
    }
      
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        case SERVER_TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException(retInstance._header.retMsg);
            break;
        default:
            break;
    };
    

    return addition_ret;
}
void CalculatorProtocol::Calculator_addition_async(Calculator_additionCallbackHandler &obj, /*in*/ DDS_Long value1, /*in*/ DDS_Long value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    CalculatorRequest instance;
    Calculator_additionTask *task = new Calculator_additionTask(obj);

    instance.unio._d = 1;
    
    instance.unio._u.addition.value1 = value1;
    instance.unio._u.addition.value2 = value2;

    retcode = Calculator_pe->send_async(&instance, task);
    
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}

DDS_Long CalculatorProtocol::Calculator_subtraction(/*in*/ DDS_Long value1, /*in*/ DDS_Long value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    DDS_Long  subtraction_ret = 0;
    CalculatorRequest instance;
    CalculatorReply retInstance;

    CalculatorReply_initialize(&retInstance);

    instance.unio._d = 2;
    
    instance.unio._u.subtraction.value1 = value1;
    instance.unio._u.subtraction.value2 = value2;

    retcode = Calculator_pe->send(&instance, &retInstance);
    
    if(retcode == OPERATION_SUCCESSFUL)
    {
    
        retcode = (ReturnMessage)retInstance._header.retCode;
        subtraction_ret = retInstance.unio._u.subtraction.subtraction_ret;
    
    }
      
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        case SERVER_TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException(retInstance._header.retMsg);
            break;
        default:
            break;
    };
    

    return subtraction_ret;
}
void CalculatorProtocol::Calculator_subtraction_async(Calculator_subtractionCallbackHandler &obj, /*in*/ DDS_Long value1, /*in*/ DDS_Long value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    CalculatorRequest instance;
    Calculator_subtractionTask *task = new Calculator_subtractionTask(obj);

    instance.unio._d = 2;
    
    instance.unio._u.subtraction.value1 = value1;
    instance.unio._u.subtraction.value2 = value2;

    retcode = Calculator_pe->send_async(&instance, task);
    
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}


void CalculatorProtocol::Calculator_serve(eprosima::rpc::protocol::Protocol &protocol,
    void *data , eprosima::rpc::transport::Endpoint *endpoint)
{
    CalculatorProtocol &_protocol = dynamic_cast<CalculatorProtocol&>(protocol);
    CalculatorRequest &requestData = *(CalculatorRequest*)data;

    switch(requestData.unio._d)
    {
                case 1:
                {
                DDS_Long  value1 = 0;
                DDS_Long  value2 = 0;
                DDS_Long  addition_ret = 0;   
                CalculatorReply replyData;
                replyData._header.clientId.value_1 = requestData._header.clientId.value_1;
                replyData._header.clientId.value_2 = requestData._header.clientId.value_2;
                replyData._header.clientId.value_3 = requestData._header.clientId.value_3;
                replyData._header.clientId.value_4 = requestData._header.clientId.value_4;
                replyData._header.requestSequenceNumber = requestData._header.requestSequenceNumber;

                replyData.unio._d = 1;


                value1 = requestData.unio._u.addition.value1;
                value2 = requestData.unio._u.addition.value2;

                try
                {
                    if(_protocol._Calculator_impl != NULL)
                    {
                        addition_ret = _protocol._Calculator_impl->addition(value1, value2);


                        replyData.unio._u.addition.addition_ret = addition_ret;

                        replyData._header.retCode = OPERATION_SUCCESSFUL;
                        replyData._header.retMsg = (char*)"";

                        _protocol.Calculator_se->sendReply(&replyData);
                    }
                    // TODO Send exception.
                }
                catch(const ServerInternalException &ex)
                {
                    memset((char*)&replyData + sizeof(replyData._header), 0, sizeof(replyData) - sizeof(replyData._header));
                    replyData._header.retCode = SERVER_INTERNAL_ERROR;
                    replyData._header.retMsg = (char*)ex.what();

                    _protocol.Calculator_se->sendReply(&replyData);
                }

                CalculatorRequest_finalize(&requestData);


                }
                break;
                
                case 2:
                {
                DDS_Long  value1 = 0;
                DDS_Long  value2 = 0;
                DDS_Long  subtraction_ret = 0;   
                CalculatorReply replyData;
                replyData._header.clientId.value_1 = requestData._header.clientId.value_1;
                replyData._header.clientId.value_2 = requestData._header.clientId.value_2;
                replyData._header.clientId.value_3 = requestData._header.clientId.value_3;
                replyData._header.clientId.value_4 = requestData._header.clientId.value_4;
                replyData._header.requestSequenceNumber = requestData._header.requestSequenceNumber;

                replyData.unio._d = 2;


                value1 = requestData.unio._u.subtraction.value1;
                value2 = requestData.unio._u.subtraction.value2;

                try
                {
                    if(_protocol._Calculator_impl != NULL)
                    {
                        subtraction_ret = _protocol._Calculator_impl->subtraction(value1, value2);


                        replyData.unio._u.subtraction.subtraction_ret = subtraction_ret;

                        replyData._header.retCode = OPERATION_SUCCESSFUL;
                        replyData._header.retMsg = (char*)"";

                        _protocol.Calculator_se->sendReply(&replyData);
                    }
                    // TODO Send exception.
                }
                catch(const ServerInternalException &ex)
                {
                    memset((char*)&replyData + sizeof(replyData._header), 0, sizeof(replyData) - sizeof(replyData._header));
                    replyData._header.retCode = SERVER_INTERNAL_ERROR;
                    replyData._header.retMsg = (char*)ex.what();

                    _protocol.Calculator_se->sendReply(&replyData);
                }

                CalculatorRequest_finalize(&requestData);


                }
                break;
                
    };        
}