/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this FASTRPC distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorDDSProtocol.cxx
 * This source file contains the definition of the protocol used to create DDS messages.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorDDSProtocol.h"
#include "rpcdds/transports/Transport.h"
#include "rpcdds/transports/dds/ProxyTransport.h"
#include "rpcdds/transports/dds/components/ProxyProcedureEndpoint.h"
#include "CalculatorDDSAsyncSupport.h"
#include "rpcdds/transports/dds/ServerTransport.h"
#include "rpcdds/transports/dds/components/ServerProcedureEndpoint.h"
#include "rpcdds/exceptions/Exceptions.h"
#include "CalculatorTopicsPlugin.h"
using namespace eprosima::rpc;
using namespace ::protocol::dds;
using namespace ::transport;
using namespace ::exception;

CalculatorProtocol::CalculatorProtocol() : ::protocol::CalculatorProtocol(), m_ddsTransport(NULL)
, Calculator_str("Calculator")
, Calculator_pe(NULL), Calculator_se(NULL)
{
}

CalculatorProtocol::~CalculatorProtocol()
{
}

bool CalculatorProtocol::setTransport(Transport &transport)
{
    if(strcmp(transport.getType(), "DDS") == 0)
    {
        m_ddsTransport = dynamic_cast<eprosima::rpc::transport::dds::Transport*>(&transport);
        
        m_ddsTransport->initialize();
        
        Protocol::_setTransport(transport);
        
        return true;  
    }
    else
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }
    
    return false;
}

// TODO Si falla que elimine los creados.
bool CalculatorProtocol::activateInterface(const char* interfaceName)
{
    const char *requesttypeName = NULL, *replytypeName = NULL;

    if(m_ddsTransport != NULL)
    {
        ::transport::TransportBehaviour behaviour = dynamic_cast<::transport::Transport*>(m_ddsTransport)->getBehaviour();
        
        if(strcmp(interfaceName, "Calculator") == 0)
        {
            requesttypeName = CalculatorRequestPlugin::get_typename();
    
            if(!CalculatorRequestPlugin::register_type(m_ddsTransport->getParticipant(), requesttypeName))
            {
                return false;
            }
            
            replytypeName = CalculatorReplyPlugin::get_typename();
    
            if(!CalculatorReplyPlugin::register_type(m_ddsTransport->getParticipant(), replytypeName))
            {
                return false;
            }
            
            if(behaviour == ::transport::PROXY_BEHAVIOUR)
            {
                Calculator_pe = dynamic_cast<::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_str,
                requesttypeName,
                replytypeName,
                true,
                (::transport::dds::Transport::Create_data)CalculatorReplyPlugin::create_data,
                (::transport::dds::Transport::Copy_data)CalculatorReplyPlugin::copy_data,
                (::transport::dds::Transport::Destroy_data)CalculatorReplyPlugin::destroy_data,
                NULL,
                sizeof(CalculatorReply)
                ));
            }
            if(behaviour == ::transport::SERVER_BEHAVIOUR)
            {
                Calculator_se = dynamic_cast<::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_str,
                    replytypeName,
                    requesttypeName,
		            true,
                    (::transport::dds::Transport::Create_data)CalculatorRequestPlugin::create_data,
                    (::transport::dds::Transport::Copy_data)CalculatorRequestPlugin::copy_data,
                    (::transport::dds::Transport::Destroy_data)CalculatorRequestPlugin::destroy_data,
                    CalculatorProtocol::Calculator_serve,
                    sizeof(CalculatorRequest)));
            }
        }

    }
    else
    {
      // TODO Trace.
    }
    
    return false;
}

int32_t CalculatorProtocol::Calculator_addition(/*in*/ int32_t value1, /*in*/ int32_t value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    int32_t  addition_ret = 0;
    CalculatorRequest instance;
    CalculatorReply retInstance;



    instance.unio()._d() = 1;
    
    instance.unio().addition().value1(value1);
    instance.unio().addition().value2(value2);

    retcode = Calculator_pe->send(&instance, &retInstance);
    
    if(retcode == OPERATION_SUCCESSFUL)
    {
    
        retcode = (ReturnMessage)retInstance._header().retCode();
        addition_ret = retInstance.unio().addition().addition_ret(); 
    
    }
      
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        case SERVER_TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException(retInstance._header().retMsg());
            break;
        default:
            break;
    };
    

    return addition_ret;
}
void CalculatorProtocol::Calculator_addition_async(Calculator_additionCallbackHandler &obj, /*in*/ int32_t value1, /*in*/ int32_t value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    CalculatorRequest instance;
    Calculator_additionTask *task = new Calculator_additionTask(obj);

    instance.unio()._d() = 1;
    
    instance.unio().addition().value1(value1);
    instance.unio().addition().value2(value2);

    retcode = Calculator_pe->send_async(&instance, task);
    
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}

int32_t CalculatorProtocol::Calculator_subtraction(/*in*/ int32_t value1, /*in*/ int32_t value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    int32_t  subtraction_ret = 0;
    CalculatorRequest instance;
    CalculatorReply retInstance;



    instance.unio()._d() = 2;
    
    instance.unio().subtraction().value1(value1);
    instance.unio().subtraction().value2(value2);

    retcode = Calculator_pe->send(&instance, &retInstance);
    
    if(retcode == OPERATION_SUCCESSFUL)
    {
    
        retcode = (ReturnMessage)retInstance._header().retCode();
        subtraction_ret = retInstance.unio().subtraction().subtraction_ret(); 
    
    }
      
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        case SERVER_TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException(retInstance._header().retMsg());
            break;
        default:
            break;
    };
    

    return subtraction_ret;
}
void CalculatorProtocol::Calculator_subtraction_async(Calculator_subtractionCallbackHandler &obj, /*in*/ int32_t value1, /*in*/ int32_t value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    CalculatorRequest instance;
    Calculator_subtractionTask *task = new Calculator_subtractionTask(obj);

    instance.unio()._d() = 2;
    
    instance.unio().subtraction().value1(value1);
    instance.unio().subtraction().value2(value2);

    retcode = Calculator_pe->send_async(&instance, task);
    
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case NO_SERVER:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}


void CalculatorProtocol::Calculator_serve(eprosima::rpc::protocol::Protocol &protocol,
    void *data , eprosima::rpc::transport::Endpoint *endpoint)
{
    CalculatorProtocol &_protocol = dynamic_cast<CalculatorProtocol&>(protocol);
    CalculatorRequest &requestData = *(CalculatorRequest*)data;

    switch(requestData.unio()._d())
    {
                case 1:
                {
                int32_t  value1 = 0;
                int32_t  value2 = 0;
                int32_t  addition_ret = 0;   
                CalculatorReply replyData;
                replyData._header().clientId().value_1() = requestData._header().clientId().value_1();
                replyData._header().clientId().value_2() = requestData._header().clientId().value_2();
                replyData._header().clientId().value_3() = requestData._header().clientId().value_3();
                replyData._header().clientId().value_4() = requestData._header().clientId().value_4();
                replyData._header().requestSequenceNumber() = requestData._header().requestSequenceNumber();

                replyData.unio()._d() = 1;


                value1 = requestData.unio().addition().value1(); 
                value2 = requestData.unio().addition().value2(); 

                try
                {
                    if(_protocol._Calculator_impl != NULL)
                    {
                        addition_ret = _protocol._Calculator_impl->addition(value1, value2);


                        replyData.unio().addition().addition_ret(addition_ret);

                        replyData._header().retCode(OPERATION_SUCCESSFUL);

                        _protocol.Calculator_se->sendReply(&replyData);
                    }
                    // TODO Send exception.
                }
                catch(const ServerInternalException &ex)
                {
                    replyData._header().retCode(SERVER_INTERNAL_ERROR);
                    replyData._header().retMsg(std::move(ex.what()));

                    _protocol.Calculator_se->sendReply(&replyData);
                }



                }
                break;
                
                case 2:
                {
                int32_t  value1 = 0;
                int32_t  value2 = 0;
                int32_t  subtraction_ret = 0;   
                CalculatorReply replyData;
                replyData._header().clientId().value_1() = requestData._header().clientId().value_1();
                replyData._header().clientId().value_2() = requestData._header().clientId().value_2();
                replyData._header().clientId().value_3() = requestData._header().clientId().value_3();
                replyData._header().clientId().value_4() = requestData._header().clientId().value_4();
                replyData._header().requestSequenceNumber() = requestData._header().requestSequenceNumber();

                replyData.unio()._d() = 2;


                value1 = requestData.unio().subtraction().value1(); 
                value2 = requestData.unio().subtraction().value2(); 

                try
                {
                    if(_protocol._Calculator_impl != NULL)
                    {
                        subtraction_ret = _protocol._Calculator_impl->subtraction(value1, value2);


                        replyData.unio().subtraction().subtraction_ret(subtraction_ret);

                        replyData._header().retCode(OPERATION_SUCCESSFUL);

                        _protocol.Calculator_se->sendReply(&replyData);
                    }
                    // TODO Send exception.
                }
                catch(const ServerInternalException &ex)
                {
                    replyData._header().retCode(SERVER_INTERNAL_ERROR);
                    replyData._header().retMsg(std::move(ex.what()));

                    _protocol.Calculator_se->sendReply(&replyData);
                }



                }
                break;
                
    };        
}