/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorTopics.cpp
 * This source file contains the implementation of topics generated using operations in the IDL file.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorTopics.h"

#include "fastcdr/Cdr.h"
#include "rpcdds/exceptions/BadParamException.h"




Calculator_addition_In::Calculator_addition_In()
: m_value1(0), m_value2(0){
}

Calculator_addition_In::~Calculator_addition_In()
{
}

Calculator_addition_In::Calculator_addition_In(const Calculator_addition_In &x)
: m_value1(x.m_value1), m_value2(x.m_value2){
}

Calculator_addition_In::Calculator_addition_In(Calculator_addition_In &&x)
: m_value1(std::move(x.m_value1)), m_value2(std::move(x.m_value2)){
}

Calculator_addition_In& Calculator_addition_In::operator=(const Calculator_addition_In &x)
{
    m_value1 = x.m_value1;;
    m_value2 = x.m_value2;;
    
    return *this;
}

Calculator_addition_In& Calculator_addition_In::operator=(Calculator_addition_In &&x)
{
    m_value1 = x.m_value1;;
    m_value2 = x.m_value2;;
    
    return *this;
}

size_t Calculator_addition_In::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

size_t Calculator_addition_In::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;

    current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);
    current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);

    return current_align;
}

void Calculator_addition_In::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_value1;

    scdr << m_value2;

}

void Calculator_addition_In::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_value1;
    dcdr >> m_value2;
}


Calculator_addition_Out::Calculator_addition_Out()
: m_return_(0){
}

Calculator_addition_Out::~Calculator_addition_Out()
{
}

Calculator_addition_Out::Calculator_addition_Out(const Calculator_addition_Out &x)
: m_return_(x.m_return_){
}

Calculator_addition_Out::Calculator_addition_Out(Calculator_addition_Out &&x)
: m_return_(std::move(x.m_return_)){
}

Calculator_addition_Out& Calculator_addition_Out::operator=(const Calculator_addition_Out &x)
{
    m_return_ = x.m_return_;;
    
    return *this;
}

Calculator_addition_Out& Calculator_addition_Out::operator=(Calculator_addition_Out &&x)
{
    m_return_ = x.m_return_;;
    
    return *this;
}

size_t Calculator_addition_Out::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

size_t Calculator_addition_Out::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Header

    //current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);
current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);

    return current_align;
}

void Calculator_addition_Out::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_return_;

}

void Calculator_addition_Out::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_return_;
}

Calculator_addition_Result::Calculator_addition_Result() : m__d(2)
{
}

Calculator_addition_Result::~Calculator_addition_Result()
{
}

Calculator_addition_Result::Calculator_addition_Result(const Calculator_addition_Result &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = x.m_out_;
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

    }
}

Calculator_addition_Result::Calculator_addition_Result(Calculator_addition_Result &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = std::move(x.m_out_);
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

    }
}

Calculator_addition_Result& Calculator_addition_Result::operator=(const Calculator_addition_Result &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = x.m_out_;
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

    }
    
    return *this;
}

Calculator_addition_Result& Calculator_addition_Result::operator=(Calculator_addition_Result &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = std::move(x.m_out_);
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

    }
    
    return *this;
}

void Calculator_addition_Result::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }
    
    m__d = __d;
}

int32_t Calculator_addition_Result::_d() const
{
    return m__d;
}

int32_t& Calculator_addition_Result::_d()
{
    return m__d;
}

void Calculator_addition_Result::unknown_exception(eprosima::rpc::protocol::dds::UnknownException _unknown_exception)
{
    m_unknown_exception = _unknown_exception;
    m__d = 2;
}

eprosima::rpc::protocol::dds::UnknownException Calculator_addition_Result::unknown_exception() const
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknown_exception;
}

eprosima::rpc::protocol::dds::UnknownException& Calculator_addition_Result::unknown_exception()
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknown_exception;
}

void Calculator_addition_Result::out_(const Calculator_addition_Out &_out_)
{
    m_out_ = _out_;
    m__d = 0;
}

void Calculator_addition_Result::out_(Calculator_addition_Out &&_out_)
{
    m_out_ = std::move(_out_);
    m__d = 0;
}

const Calculator_addition_Out& Calculator_addition_Result::out_() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_out_;
}

Calculator_addition_Out& Calculator_addition_Result::out_()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_out_;
}

void Calculator_addition_Result::sysx_(eprosima::rpc::ReturnMessage _sysx_)
{
    m_sysx_ = _sysx_;
    m__d = 1;
}

eprosima::rpc::ReturnMessage Calculator_addition_Result::sysx_() const
{
    if(m__d != 1)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_sysx_;
}

eprosima::rpc::ReturnMessage& Calculator_addition_Result::sysx_()
{
    if(m__d != 1)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_sysx_;
}


size_t Calculator_addition_Result::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // sysx_ attribute. The unknown_exception is minor.
    union_max_size_serialized = current_alignment;
    union_max_size_serialized += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    reset_alignment = current_alignment;
    reset_alignment += Calculator_addition_Out::getMaxCdrSerializedSize(reset_alignment);

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;


    return union_max_size_serialized - initial_alignment;
}

size_t Calculator_addition_Result::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Discriminator

    return current_align;
}

void Calculator_addition_Result::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case 0:
            scdr << m_out_;
            break;
        case 1:
            scdr << (int32_t)m_sysx_;
            break;


        default:
            scdr << m_unknown_exception;
            break;
    }
}

void Calculator_addition_Result::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case 0:
            dcdr >> m_out_;
            break;
        case 1:
            dcdr >> (int32_t&)m_sysx_;
            break;


        default:
            dcdr >> m_unknown_exception;
            break;
    }
}

Calculator_subtraction_In::Calculator_subtraction_In()
: m_value1(0), m_value2(0){
}

Calculator_subtraction_In::~Calculator_subtraction_In()
{
}

Calculator_subtraction_In::Calculator_subtraction_In(const Calculator_subtraction_In &x)
: m_value1(x.m_value1), m_value2(x.m_value2){
}

Calculator_subtraction_In::Calculator_subtraction_In(Calculator_subtraction_In &&x)
: m_value1(std::move(x.m_value1)), m_value2(std::move(x.m_value2)){
}

Calculator_subtraction_In& Calculator_subtraction_In::operator=(const Calculator_subtraction_In &x)
{
    m_value1 = x.m_value1;;
    m_value2 = x.m_value2;;
    
    return *this;
}

Calculator_subtraction_In& Calculator_subtraction_In::operator=(Calculator_subtraction_In &&x)
{
    m_value1 = x.m_value1;;
    m_value2 = x.m_value2;;
    
    return *this;
}

size_t Calculator_subtraction_In::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

size_t Calculator_subtraction_In::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;

    current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);
    current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);

    return current_align;
}

void Calculator_subtraction_In::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_value1;

    scdr << m_value2;

}

void Calculator_subtraction_In::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_value1;
    dcdr >> m_value2;
}


Calculator_subtraction_Out::Calculator_subtraction_Out()
: m_return_(0){
}

Calculator_subtraction_Out::~Calculator_subtraction_Out()
{
}

Calculator_subtraction_Out::Calculator_subtraction_Out(const Calculator_subtraction_Out &x)
: m_return_(x.m_return_){
}

Calculator_subtraction_Out::Calculator_subtraction_Out(Calculator_subtraction_Out &&x)
: m_return_(std::move(x.m_return_)){
}

Calculator_subtraction_Out& Calculator_subtraction_Out::operator=(const Calculator_subtraction_Out &x)
{
    m_return_ = x.m_return_;;
    
    return *this;
}

Calculator_subtraction_Out& Calculator_subtraction_Out::operator=(Calculator_subtraction_Out &&x)
{
    m_return_ = x.m_return_;;
    
    return *this;
}

size_t Calculator_subtraction_Out::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

size_t Calculator_subtraction_Out::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Header

    //current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);
current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);

    return current_align;
}

void Calculator_subtraction_Out::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_return_;

}

void Calculator_subtraction_Out::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_return_;
}

Calculator_subtraction_Result::Calculator_subtraction_Result() : m__d(2)
{
}

Calculator_subtraction_Result::~Calculator_subtraction_Result()
{
}

Calculator_subtraction_Result::Calculator_subtraction_Result(const Calculator_subtraction_Result &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = x.m_out_;
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

    }
}

Calculator_subtraction_Result::Calculator_subtraction_Result(Calculator_subtraction_Result &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = std::move(x.m_out_);
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

    }
}

Calculator_subtraction_Result& Calculator_subtraction_Result::operator=(const Calculator_subtraction_Result &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = x.m_out_;
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

    }
    
    return *this;
}

Calculator_subtraction_Result& Calculator_subtraction_Result::operator=(Calculator_subtraction_Result &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
            m_out_ = std::move(x.m_out_);
            break;
        case 1:
            m_sysx_ = x.m_sysx_;
            break;

    }
    
    return *this;
}

void Calculator_subtraction_Result::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }
    
    m__d = __d;
}

int32_t Calculator_subtraction_Result::_d() const
{
    return m__d;
}

int32_t& Calculator_subtraction_Result::_d()
{
    return m__d;
}

void Calculator_subtraction_Result::unknown_exception(eprosima::rpc::protocol::dds::UnknownException _unknown_exception)
{
    m_unknown_exception = _unknown_exception;
    m__d = 2;
}

eprosima::rpc::protocol::dds::UnknownException Calculator_subtraction_Result::unknown_exception() const
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknown_exception;
}

eprosima::rpc::protocol::dds::UnknownException& Calculator_subtraction_Result::unknown_exception()
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknown_exception;
}

void Calculator_subtraction_Result::out_(const Calculator_subtraction_Out &_out_)
{
    m_out_ = _out_;
    m__d = 0;
}

void Calculator_subtraction_Result::out_(Calculator_subtraction_Out &&_out_)
{
    m_out_ = std::move(_out_);
    m__d = 0;
}

const Calculator_subtraction_Out& Calculator_subtraction_Result::out_() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_out_;
}

Calculator_subtraction_Out& Calculator_subtraction_Result::out_()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_out_;
}

void Calculator_subtraction_Result::sysx_(eprosima::rpc::ReturnMessage _sysx_)
{
    m_sysx_ = _sysx_;
    m__d = 1;
}

eprosima::rpc::ReturnMessage Calculator_subtraction_Result::sysx_() const
{
    if(m__d != 1)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_sysx_;
}

eprosima::rpc::ReturnMessage& Calculator_subtraction_Result::sysx_()
{
    if(m__d != 1)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_sysx_;
}


size_t Calculator_subtraction_Result::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // sysx_ attribute. The unknown_exception is minor.
    union_max_size_serialized = current_alignment;
    union_max_size_serialized += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    reset_alignment = current_alignment;
    reset_alignment += Calculator_subtraction_Out::getMaxCdrSerializedSize(reset_alignment);

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;


    return union_max_size_serialized - initial_alignment;
}

size_t Calculator_subtraction_Result::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Discriminator

    return current_align;
}

void Calculator_subtraction_Result::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case 0:
            scdr << m_out_;
            break;
        case 1:
            scdr << (int32_t)m_sysx_;
            break;


        default:
            scdr << m_unknown_exception;
            break;
    }
}

void Calculator_subtraction_Result::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case 0:
            dcdr >> m_out_;
            break;
        case 1:
            dcdr >> (int32_t&)m_sysx_;
            break;


        default:
            dcdr >> m_unknown_exception;
            break;
    }
}


Calculator_Call::Calculator_Call() : m__d(0)
{
}

Calculator_Call::~Calculator_Call()
{
}

Calculator_Call::Calculator_Call(const Calculator_Call &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    m_addition = x.m_addition;
                    break;
                
                case (int32_t)0xCA019A14:
                    m_subtraction = x.m_subtraction;
                    break;
                
    }
}

Calculator_Call::Calculator_Call(Calculator_Call &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    m_addition = std::move(x.m_addition);
                    break;
                
                case (int32_t)0xCA019A14:
                    m_subtraction = std::move(x.m_subtraction);
                    break;
                
    }
}

Calculator_Call& Calculator_Call::operator=(const Calculator_Call &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    m_addition = x.m_addition;
                    break;
                
                case (int32_t)0xCA019A14:
                    m_subtraction = x.m_subtraction;
                    break;
                
    }
    
    return *this;
}

Calculator_Call& Calculator_Call::operator=(Calculator_Call &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    m_addition = std::move(x.m_addition);
                    break;
                
                case (int32_t)0xCA019A14:
                    m_subtraction = std::move(x.m_subtraction);
                    break;
                
    }
    
    return *this;
}

void Calculator_Call::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }
    
    m__d = __d;
}

int32_t Calculator_Call::_d() const
{
    return m__d;
}

int32_t& Calculator_Call::_d()
{
    return m__d;
}

void Calculator_Call::unknown_operation(eprosima::rpc::protocol::dds::UnknownOperation _unknown_operation)
{
    m_unknown_operation = _unknown_operation;
    m__d = 0;
}

eprosima::rpc::protocol::dds::UnknownOperation Calculator_Call::unknown_operation() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_unknown_operation;
}

eprosima::rpc::protocol::dds::UnknownOperation& Calculator_Call::unknown_operation()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_unknown_operation;
}

void Calculator_Call::addition(const Calculator_addition_In &_addition)
{
    m_addition = _addition;
    m__d = (int32_t)0xCBC6CEAA;
}

void Calculator_Call::addition(Calculator_addition_In &&_addition)
{
    m_addition = std::move(_addition);
    m__d = (int32_t)0xCBC6CEAA;
}

const Calculator_addition_In& Calculator_Call::addition() const
{
    if(m__d != (int32_t)0xCBC6CEAA)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_addition;
}

Calculator_addition_In& Calculator_Call::addition()
{
    if(m__d != (int32_t)0xCBC6CEAA)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_addition;
}

void Calculator_Call::subtraction(const Calculator_subtraction_In &_subtraction)
{
    m_subtraction = _subtraction;
    m__d = (int32_t)0xCA019A14;
}

void Calculator_Call::subtraction(Calculator_subtraction_In &&_subtraction)
{
    m_subtraction = std::move(_subtraction);
    m__d = (int32_t)0xCA019A14;
}

const Calculator_subtraction_In& Calculator_Call::subtraction() const
{
    if(m__d != (int32_t)0xCA019A14)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_subtraction;
}

Calculator_subtraction_In& Calculator_Call::subtraction()
{
    if(m__d != (int32_t)0xCA019A14)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_subtraction;
}


size_t Calculator_Call::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // Default unknown_operation attribute;
    union_max_size_serialized = current_alignment + 1;

        reset_alignment = current_alignment;

        reset_alignment += Calculator_addition_In::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        
        reset_alignment = current_alignment;

        reset_alignment += Calculator_subtraction_In::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        

    return union_max_size_serialized - initial_alignment;
}

size_t Calculator_Call::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Discriminator

    return current_align;
}

void Calculator_Call::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    scdr << m_addition;
                    break;
                
                case (int32_t)0xCA019A14:
                    scdr << m_subtraction;
                    break;
                
        default:
            scdr << m_unknown_operation;
            break;
    }
}

void Calculator_Call::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    dcdr >> m_addition;
                    break;
                
                case (int32_t)0xCA019A14:
                    dcdr >> m_subtraction;
                    break;
                
        default:
            dcdr >> m_unknown_operation;
            break;
    }
}

Calculator_Request::Calculator_Request()
{
}

Calculator_Request::~Calculator_Request()
{
}

Calculator_Request::Calculator_Request(const Calculator_Request &x)
: m_header(x.m_header), m_request(x.m_request)
{
}

Calculator_Request::Calculator_Request(Calculator_Request &&x)
: m_header(std::move(x.m_header)), m_request(std::move(x.m_request))
{
}

Calculator_Request& Calculator_Request::operator=(const Calculator_Request &x)
{
    m_header = x.m_header;
    m_request = x.m_request;
    
    return *this;
}

Calculator_Request& Calculator_Request::operator=(Calculator_Request &&x)
{
    m_header = std::move(x.m_header);
    m_request = std::move(x.m_request);
    
    return *this;
}

size_t Calculator_Request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment +=  eprosima::rpc::protocol::dds::RequestHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += Calculator_Call::getMaxCdrSerializedSize(current_alignment);
            
    return current_alignment - initial_alignment;
}

size_t Calculator_Request::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Header and request

    return current_align;
}

void Calculator_Request::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_header;
    scdr << m_request;
}

void Calculator_Request::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_header;
    dcdr >> m_request;
}

Calculator_Return::Calculator_Return() : m__d(0)
{
}

Calculator_Return::~Calculator_Return()
{
}

Calculator_Return::Calculator_Return(const Calculator_Return &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    m_addition = x.m_addition;
                    break;
                
                case (int32_t)0xCA019A14:
                    m_subtraction = x.m_subtraction;
                    break;
                
    }
}

Calculator_Return::Calculator_Return(Calculator_Return &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    m_addition = std::move(x.m_addition);
                    break;
                
                case (int32_t)0xCA019A14:
                    m_subtraction = std::move(x.m_subtraction);
                    break;
                
    }
}

Calculator_Return& Calculator_Return::operator=(const Calculator_Return &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    m_addition = x.m_addition;
                    break;
                
                case (int32_t)0xCA019A14:
                    m_subtraction = x.m_subtraction;
                    break;
                
    }
    
    return *this;
}

Calculator_Return& Calculator_Return::operator=(Calculator_Return &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    m_addition = std::move(x.m_addition);
                    break;
                
                case (int32_t)0xCA019A14:
                    m_subtraction = std::move(x.m_subtraction);
                    break;
                
    }
    
    return *this;
}

void Calculator_Return::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }
    
    m__d = __d;
}

int32_t Calculator_Return::_d() const
{
    return m__d;
}

int32_t& Calculator_Return::_d()
{
    return m__d;
}

void Calculator_Return::unknown_operation(eprosima::rpc::protocol::dds::UnknownOperation _unknown_operation)
{
    m_unknown_operation = _unknown_operation;
    m__d = 0;
}

eprosima::rpc::protocol::dds::UnknownOperation Calculator_Return::unknown_operation() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_unknown_operation;
}

eprosima::rpc::protocol::dds::UnknownOperation& Calculator_Return::unknown_operation()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_unknown_operation;
}

void Calculator_Return::addition(const Calculator_addition_Result &_addition)
{
    m_addition = _addition;
    m__d = (int32_t)0xCBC6CEAA;
}

void Calculator_Return::addition(Calculator_addition_Result &&_addition)
{
    m_addition = std::move(_addition);
    m__d = (int32_t)0xCBC6CEAA;
}

const Calculator_addition_Result& Calculator_Return::addition() const
{
    if(m__d != (int32_t)0xCBC6CEAA)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_addition;
}

Calculator_addition_Result& Calculator_Return::addition()
{
    if(m__d != (int32_t)0xCBC6CEAA)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_addition;
}

void Calculator_Return::subtraction(const Calculator_subtraction_Result &_subtraction)
{
    m_subtraction = _subtraction;
    m__d = (int32_t)0xCA019A14;
}

void Calculator_Return::subtraction(Calculator_subtraction_Result &&_subtraction)
{
    m_subtraction = std::move(_subtraction);
    m__d = (int32_t)0xCA019A14;
}

const Calculator_subtraction_Result& Calculator_Return::subtraction() const
{
    if(m__d != (int32_t)0xCA019A14)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_subtraction;
}

Calculator_subtraction_Result& Calculator_Return::subtraction()
{
    if(m__d != (int32_t)0xCA019A14)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");
    
    return m_subtraction;
}


size_t Calculator_Return::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // Default unknown_operation attribute;
    union_max_size_serialized = current_alignment + 1;

        reset_alignment = current_alignment;

        reset_alignment += Calculator_addition_Result::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        
        reset_alignment = current_alignment;

        reset_alignment += Calculator_subtraction_Result::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        

    return union_max_size_serialized - initial_alignment;
}

size_t Calculator_Return::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Discriminator

    return current_align;
}

void Calculator_Return::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    scdr << m_addition;
                    break;
                
                case (int32_t)0xCA019A14:
                    scdr << m_subtraction;
                    break;
                
        default:
            scdr << m_unknown_operation;
            break;
    }
}

void Calculator_Return::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
                case (int32_t)0xCBC6CEAA:
                    dcdr >> m_addition;
                    break;
                
                case (int32_t)0xCA019A14:
                    dcdr >> m_subtraction;
                    break;
                
        default:
            dcdr >>  m_unknown_operation;
            break;
    }
}

Calculator_Reply::Calculator_Reply()
{
}

Calculator_Reply::~Calculator_Reply()
{
}

Calculator_Reply::Calculator_Reply(const Calculator_Reply &x)
: m_header(x.m_header), m_reply(x.m_reply)
{
}

Calculator_Reply::Calculator_Reply(Calculator_Reply &&x)
: m_header(std::move(x.m_header)), m_reply(std::move(x.m_reply))
{
}

Calculator_Reply& Calculator_Reply::operator=(const Calculator_Reply &x)
{
    m_header = x.m_header;
    m_reply = x.m_reply;
    
    return *this;
}

Calculator_Reply& Calculator_Reply::operator=(Calculator_Reply &&x)
{
    m_header = std::move(x.m_header);
    m_reply = std::move(x.m_reply);
    
    return *this;
}

size_t Calculator_Reply::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    current_alignment +=  eprosima::rpc::protocol::dds::ReplyHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += Calculator_Return::getMaxCdrSerializedSize(current_alignment);
            
    return current_alignment - initial_alignment;
}

size_t Calculator_Reply::getSerializedSize(size_t current_alignment) const
{
    size_t current_align = current_alignment;
    // TODO Header and unio

    return current_align;
}

void Calculator_Reply::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_header;
    scdr << m_reply;
}

void Calculator_Reply::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_header;
    dcdr >> m_reply;
}
