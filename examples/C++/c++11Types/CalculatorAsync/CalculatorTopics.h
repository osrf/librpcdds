/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this FASTRPC distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorTopics.h
 * This header file contains the declaration of topics generated using operations in the IDL file.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _Calculator_TOPICS_H_
#define _Calculator_TOPICS_H_

#include "Calculator.h"
#include "rpcdds/protocols/dds/MessageHeader.h"

#include <cstddef>

#if defined(_WIN32)
#if defined(USER_CPP_DLL_EXPORT)
#define user_cpp_DllExport __declspec( dllexport )
#else
#define user_cpp_DllExport
#endif
#else
#define user_cpp_DllExport
#endif

/*!
 * @brief This class represents the structure Calculator_additionRequest that can be used to send/receive requests
 * for the operation Calculator::addition.
 * 
 * @ingroup CALCULATOR
 */
class user_cpp_DllExport Calculator_additionRequest
{
public:

    /*!
     * @brief Default constructor.
     * @param initialize True value initializes all pointers using "new" operator. In the other case,
     * all pointers will be NULL.
     */
    Calculator_additionRequest();
    
    /*!
     * @brief Default destructor.
     */
    ~Calculator_additionRequest();
    
    /*! TODO Cuidado, copia los punteros. Si el otro request es borrado, estos punteros son inválidos.
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_additionRequest that will be copied.
     */
    Calculator_additionRequest(const Calculator_additionRequest &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_additionRequest that will be copied.
     */
    Calculator_additionRequest(Calculator_additionRequest &&x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    Calculator_additionRequest& operator=(const Calculator_additionRequest &x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    Calculator_additionRequest& operator=(Calculator_additionRequest &&x);

    /*! TODO
     * @brief This function sets a value in member value1
     * @param _value1 New value for member value1
     */
    inline void value1(int32_t _value1)
    {
        m_value1 = _value1;
    }

    /*! TODO
     * @brief This function returns the value of member value1
     * @return Value of member value1
     */
    inline int32_t value1() const
    {
        return m_value1;
    }

    /*! TODO
     * @brief This function returns a reference to member value1
     * @return Reference to member value1
     */
    inline int32_t& value1()
    {
        return m_value1;
    }
    /*! TODO
     * @brief This function sets a value in member value2
     * @param _value2 New value for member value2
     */
    inline void value2(int32_t _value2)
    {
        m_value2 = _value2;
    }

    /*! TODO
     * @brief This function returns the value of member value2
     * @return Value of member value2
     */
    inline int32_t value2() const
    {
        return m_value2;
    }

    /*! TODO
     * @brief This function returns a reference to member value2
     * @return Reference to member value2
     */
    inline int32_t& value2()
    {
        return m_value2;
    }

    /*! TODO */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*! TODO */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    // TODO
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    // TODO
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m_value1;
    int32_t m_value2;
};

/*!
 * @brief This class represents the structure Calculator_additionReply that can be used to send/receive replies
 * for the operation Calculator::addition.
 * 
 * @ingroup CALCULATOR
 */
class user_cpp_DllExport Calculator_additionReply
{
public:

    /*!
     * @brief Default constructor.
     * @param initialize True value initializes all pointers using "new" operator. In the other case,
     * all pointers will be NULL.
     */
    Calculator_additionReply();
    
    /*!
     * @brief Default destructor.
     */
    ~Calculator_additionReply();
    
    /*! TODO Cuidado, copia los punteros. Si el otro request es borrado, estos punteros son inválidos.
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_additionReply that will be copied.
     */
    Calculator_additionReply(const Calculator_additionReply &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_additionReply that will be copied.
     */
    Calculator_additionReply(Calculator_additionReply &&x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    Calculator_additionReply& operator=(const Calculator_additionReply &x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    Calculator_additionReply& operator=(Calculator_additionReply &&x);

    /*! TODO
     * @brief This function sets a value in member addition_ret
     * @param _addition_ret New value for member addition_ret
     */
    inline void addition_ret(int32_t _addition_ret)
    {
        m_addition_ret = _addition_ret;
    }

    /*! TODO
     * @brief This function returns the value of member addition_ret
     * @return Value of member addition_ret
     */
    inline int32_t addition_ret() const
    {
        return m_addition_ret;
    }

    /*! TODO
     * @brief This function returns a reference to member addition_ret
     * @return Reference to member addition_ret
     */
    inline int32_t& addition_ret()
    {
        return m_addition_ret;
    }

    /*! TODO */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*! TODO */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    // TODO
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    // TODO
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m_addition_ret;
};

/*!
 * @brief This class represents the structure Calculator_subtractionRequest that can be used to send/receive requests
 * for the operation Calculator::subtraction.
 * 
 * @ingroup CALCULATOR
 */
class user_cpp_DllExport Calculator_subtractionRequest
{
public:

    /*!
     * @brief Default constructor.
     * @param initialize True value initializes all pointers using "new" operator. In the other case,
     * all pointers will be NULL.
     */
    Calculator_subtractionRequest();
    
    /*!
     * @brief Default destructor.
     */
    ~Calculator_subtractionRequest();
    
    /*! TODO Cuidado, copia los punteros. Si el otro request es borrado, estos punteros son inválidos.
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_subtractionRequest that will be copied.
     */
    Calculator_subtractionRequest(const Calculator_subtractionRequest &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_subtractionRequest that will be copied.
     */
    Calculator_subtractionRequest(Calculator_subtractionRequest &&x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    Calculator_subtractionRequest& operator=(const Calculator_subtractionRequest &x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    Calculator_subtractionRequest& operator=(Calculator_subtractionRequest &&x);

    /*! TODO
     * @brief This function sets a value in member value1
     * @param _value1 New value for member value1
     */
    inline void value1(int32_t _value1)
    {
        m_value1 = _value1;
    }

    /*! TODO
     * @brief This function returns the value of member value1
     * @return Value of member value1
     */
    inline int32_t value1() const
    {
        return m_value1;
    }

    /*! TODO
     * @brief This function returns a reference to member value1
     * @return Reference to member value1
     */
    inline int32_t& value1()
    {
        return m_value1;
    }
    /*! TODO
     * @brief This function sets a value in member value2
     * @param _value2 New value for member value2
     */
    inline void value2(int32_t _value2)
    {
        m_value2 = _value2;
    }

    /*! TODO
     * @brief This function returns the value of member value2
     * @return Value of member value2
     */
    inline int32_t value2() const
    {
        return m_value2;
    }

    /*! TODO
     * @brief This function returns a reference to member value2
     * @return Reference to member value2
     */
    inline int32_t& value2()
    {
        return m_value2;
    }

    /*! TODO */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*! TODO */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    // TODO
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    // TODO
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m_value1;
    int32_t m_value2;
};

/*!
 * @brief This class represents the structure Calculator_subtractionReply that can be used to send/receive replies
 * for the operation Calculator::subtraction.
 * 
 * @ingroup CALCULATOR
 */
class user_cpp_DllExport Calculator_subtractionReply
{
public:

    /*!
     * @brief Default constructor.
     * @param initialize True value initializes all pointers using "new" operator. In the other case,
     * all pointers will be NULL.
     */
    Calculator_subtractionReply();
    
    /*!
     * @brief Default destructor.
     */
    ~Calculator_subtractionReply();
    
    /*! TODO Cuidado, copia los punteros. Si el otro request es borrado, estos punteros son inválidos.
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_subtractionReply that will be copied.
     */
    Calculator_subtractionReply(const Calculator_subtractionReply &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_subtractionReply that will be copied.
     */
    Calculator_subtractionReply(Calculator_subtractionReply &&x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    Calculator_subtractionReply& operator=(const Calculator_subtractionReply &x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    Calculator_subtractionReply& operator=(Calculator_subtractionReply &&x);

    /*! TODO
     * @brief This function sets a value in member subtraction_ret
     * @param _subtraction_ret New value for member subtraction_ret
     */
    inline void subtraction_ret(int32_t _subtraction_ret)
    {
        m_subtraction_ret = _subtraction_ret;
    }

    /*! TODO
     * @brief This function returns the value of member subtraction_ret
     * @return Value of member subtraction_ret
     */
    inline int32_t subtraction_ret() const
    {
        return m_subtraction_ret;
    }

    /*! TODO
     * @brief This function returns a reference to member subtraction_ret
     * @return Reference to member subtraction_ret
     */
    inline int32_t& subtraction_ret()
    {
        return m_subtraction_ret;
    }

    /*! TODO */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*! TODO */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    // TODO
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    // TODO
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m_subtraction_ret;
};


/*!
 * @brief This class represents the union CalculatorRequest_union defined by the user in the IDL file.
 * @ingroup CALCULATOR
 */
class CalculatorRequest_union
{
public:
    // TODO  Doxygen

    /*!
     * @brief Default constructor.
     */
    CalculatorRequest_union();
    
    /*!
     * @brief Default destructor.
     */
    ~CalculatorRequest_union();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CalculatorRequest_union that will be copied.
     */
    CalculatorRequest_union(const CalculatorRequest_union &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object CalculatorRequest_union that will be copied.
     */
    CalculatorRequest_union(CalculatorRequest_union &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CalculatorRequest_union that will be copied.
     */
    CalculatorRequest_union& operator=(const CalculatorRequest_union &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object CalculatorRequest_union that will be copied.
     */
    CalculatorRequest_union& operator=(CalculatorRequest_union &&x);
    
    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    int32_t& _d();

    /*! TODO
     * @brief This function copies the value in member addition
     * @param _addition New value to be copied in member addition
     */
    void addition(const Calculator_additionRequest &_addition);

    /*! TODO
     * @brief This function moves the value in member addition
     * @param _addition New value to be moved in member addition
     */
    void addition(Calculator_additionRequest &&_addition);

    /*! TODO
     * @brief This function returns a constant reference to member addition
     * @return Constant reference to member addition
     */
    const Calculator_additionRequest& addition() const;

    /*! TODO
     * @brief This function returns a reference to member addition
     * @return Reference to member addition
     */
    Calculator_additionRequest& addition();
    /*! TODO
     * @brief This function copies the value in member subtraction
     * @param _subtraction New value to be copied in member subtraction
     */
    void subtraction(const Calculator_subtractionRequest &_subtraction);

    /*! TODO
     * @brief This function moves the value in member subtraction
     * @param _subtraction New value to be moved in member subtraction
     */
    void subtraction(Calculator_subtractionRequest &&_subtraction);

    /*! TODO
     * @brief This function returns a constant reference to member subtraction
     * @return Constant reference to member subtraction
     */
    const Calculator_subtractionRequest& subtraction() const;

    /*! TODO
     * @brief This function returns a reference to member subtraction
     * @return Reference to member subtraction
     */
    Calculator_subtractionRequest& subtraction();

    // TODO
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*! TODO */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    // TODO
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    // TODO
    void deserialize(eprosima::fastcdr::Cdr &cdr);
    
private:
    int32_t m__d;

    Calculator_additionRequest m_addition;
    Calculator_subtractionRequest m_subtraction;
};

/*!
 * @brief This class represents the structure CalculatorRequest that can be used to send/receive requests
 * for the interface Calculator.
 * 
 * @ingroup CALCULATOR
 */
class user_cpp_DllExport CalculatorRequest
{
public:

    /*!
     * @brief Default constructor.
     * @param initialize True value initializes all pointers using "new" operator. In the other case,
     * all pointers will be NULL.
     */
    CalculatorRequest();
    
    /*!
     * @brief Default destructor.
     */
    ~CalculatorRequest();
    
    /*! TODO Cuidado, copia los punteros. Si el otro request es borrado, estos punteros son inválidos.
     * @brief Copy constructor.
     * @param x Reference to the object CalculatorRequest that will be copied.
     */
    CalculatorRequest(const CalculatorRequest &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object CalculatorRequest that will be copied.
     */
    CalculatorRequest(CalculatorRequest &&x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator that will be copied.
     */
    CalculatorRequest& operator=(const CalculatorRequest &x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator that will be copied.
     */
    CalculatorRequest& operator=(CalculatorRequest &&x);

    inline void _header(const eprosima::rpc::protocol::dds::RequestHeader &__header)
    {
        m__header = __header;
    }

    inline void _header(eprosima::rpc::protocol::dds::RequestHeader &&__header)
    {
        m__header = std::move(__header);
    }

    inline const eprosima::rpc::protocol::dds::RequestHeader& _header() const
    {
        return m__header;
    }

    inline eprosima::rpc::protocol::dds::RequestHeader& _header()
    {
        return m__header;
    }

    inline void unio(const CalculatorRequest_union &_unio)
    {
        m_unio = _unio;
    }

    inline void unio(CalculatorRequest_union &&_unio)
    {
        m_unio = std::move(_unio);
    }

    inline const CalculatorRequest_union& unio() const
    {
        return m_unio;
    }

    inline CalculatorRequest_union& unio()
    {
        return m_unio;
    }

    /*! TODO */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*! TODO */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    // TODO
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    // TODO
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::RequestHeader m__header;

    CalculatorRequest_union m_unio;
};

/*!
 * @brief This class represents the union CalculatorReply_union defined by the user in the IDL file.
 * @ingroup CALCULATOR
 */
class CalculatorReply_union
{
public:
    // TODO  Doxygen

    /*!
     * @brief Default constructor.
     */
    CalculatorReply_union();
    
    /*!
     * @brief Default destructor.
     */
    ~CalculatorReply_union();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CalculatorReply_union that will be copied.
     */
    CalculatorReply_union(const CalculatorReply_union &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object CalculatorReply_union that will be copied.
     */
    CalculatorReply_union(CalculatorReply_union &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CalculatorReply_union that will be copied.
     */
    CalculatorReply_union& operator=(const CalculatorReply_union &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object CalculatorReply_union that will be copied.
     */
    CalculatorReply_union& operator=(CalculatorReply_union &&x);
    
    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    int32_t& _d();

    /*! TODO
     * @brief This function copies the value in member addition
     * @param _addition New value to be copied in member addition
     */
    void addition(const Calculator_additionReply &_addition);

    /*! TODO
     * @brief This function moves the value in member addition
     * @param _addition New value to be moved in member addition
     */
    void addition(Calculator_additionReply &&_addition);

    /*! TODO
     * @brief This function returns a constant reference to member addition
     * @return Constant reference to member addition
     */
    const Calculator_additionReply& addition() const;

    /*! TODO
     * @brief This function returns a reference to member addition
     * @return Reference to member addition
     */
    Calculator_additionReply& addition();
    /*! TODO
     * @brief This function copies the value in member subtraction
     * @param _subtraction New value to be copied in member subtraction
     */
    void subtraction(const Calculator_subtractionReply &_subtraction);

    /*! TODO
     * @brief This function moves the value in member subtraction
     * @param _subtraction New value to be moved in member subtraction
     */
    void subtraction(Calculator_subtractionReply &&_subtraction);

    /*! TODO
     * @brief This function returns a constant reference to member subtraction
     * @return Constant reference to member subtraction
     */
    const Calculator_subtractionReply& subtraction() const;

    /*! TODO
     * @brief This function returns a reference to member subtraction
     * @return Reference to member subtraction
     */
    Calculator_subtractionReply& subtraction();

    // TODO
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*! TODO */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    // TODO
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    // TODO
    void deserialize(eprosima::fastcdr::Cdr &cdr);
    
private:
    int32_t m__d;

    Calculator_additionReply m_addition;
    Calculator_subtractionReply m_subtraction;
};

/*!
 * @brief This class represents the structure CalculatorReply that can be used to send/receive replies
 * for the interface Calculator.
 * 
 * @ingroup CALCULATOR
 */
class user_cpp_DllExport CalculatorReply
{
public:

    /*!
     * @brief Default constructor.
     * @param initialize True value initializes all pointers using "new" operator. In the other case,
     * all pointers will be NULL.
     */
    CalculatorReply();
    
    /*!
     * @brief Default destructor.
     */
    ~CalculatorReply();
    
    /*! TODO Cuidado, copia los punteros. Si el otro request es borrado, estos punteros son inválidos.
     * @brief Copy constructor.
     * @param x Reference to the object CalculatorReply that will be copied.
     */
    CalculatorReply(const CalculatorReply &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object CalculatorReply that will be copied.
     */
    CalculatorReply(CalculatorReply &&x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator that will be copied.
     */
    CalculatorReply& operator=(const CalculatorReply &x);

    /*! TODO
     * @brief Copy assignment.
     * @param x Reference to the object Calculator that will be copied.
     */
    CalculatorReply& operator=(CalculatorReply &&x);

    inline void _header(const eprosima::rpc::protocol::dds::ReplyHeader &__header)
    {
        m__header = __header;
    }

    inline void _header(eprosima::rpc::protocol::dds::ReplyHeader &&__header)
    {
        m__header = std::move(__header);
    }

    inline const eprosima::rpc::protocol::dds::ReplyHeader& _header() const
    {
        return m__header;
    }

    inline eprosima::rpc::protocol::dds::ReplyHeader& _header()
    {
        return m__header;
    }

    inline void unio(const CalculatorReply_union &_unio)
    {
        m_unio = _unio;
    }

    inline void unio(CalculatorReply_union &&_unio)
    {
        m_unio = std::move(_unio);
    }

    inline const CalculatorReply_union& unio() const
    {
        return m_unio;
    }

    inline CalculatorReply_union& unio()
    {
        return m_unio;
    }

    /*! TODO */
    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*! TODO */
    size_t getSerializedSize(size_t current_alignment = 0) const;

    // TODO
    void serialize(eprosima::fastcdr::Cdr &cdr) const;

    // TODO
    void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::ReplyHeader m__header;

    CalculatorReply_union m_unio;
};

#endif // _Calculator_TOPICS_H_